ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"PM.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	PM_initVar
  20              		.bss
  21              		.type	PM_initVar, %object
  22              		.size	PM_initVar, 1
  23              	PM_initVar:
  24 0000 00       		.space	1
  25              		.comm	PM_offset,2,4
  26              		.comm	PM_countsPer10Volt,4,4
  27              		.section	.rodata
  28              		.align	2
  29              		.type	PM_channelsConfig, %object
  30              		.size	PM_channelsConfig, 4
  31              	PM_channelsConfig:
  32 0000 00000000 		.space	4
  33              		.section	.text.PM_Start,"ax",%progbits
  34              		.align	2
  35              		.global	PM_Start
  36              		.code	16
  37              		.thumb_func
  38              		.type	PM_Start, %function
  39              	PM_Start:
  40              	.LFB2:
  41              		.file 1 "Generated_Source\\PSoC4\\PM.c"
   1:Generated_Source\PSoC4/PM.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/PM.c **** * File Name: PM.c
   3:Generated_Source\PSoC4/PM.c **** * Version 2.60
   4:Generated_Source\PSoC4/PM.c **** *
   5:Generated_Source\PSoC4/PM.c **** * Description:
   6:Generated_Source\PSoC4/PM.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:Generated_Source\PSoC4/PM.c **** *  Approximation ADC Component Component.
   8:Generated_Source\PSoC4/PM.c **** *
   9:Generated_Source\PSoC4/PM.c **** * Note:
  10:Generated_Source\PSoC4/PM.c **** *
  11:Generated_Source\PSoC4/PM.c **** ********************************************************************************
  12:Generated_Source\PSoC4/PM.c **** * Copyright 2008-2017, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/PM.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/PM.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/PM.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/PM.c **** *******************************************************************************/
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 2


  17:Generated_Source\PSoC4/PM.c **** 
  18:Generated_Source\PSoC4/PM.c **** #include "PM.h"
  19:Generated_Source\PSoC4/PM.c **** 
  20:Generated_Source\PSoC4/PM.c **** 
  21:Generated_Source\PSoC4/PM.c **** /***************************************
  22:Generated_Source\PSoC4/PM.c **** * Global data allocation
  23:Generated_Source\PSoC4/PM.c **** ***************************************/
  24:Generated_Source\PSoC4/PM.c **** uint8 PM_initVar = 0u;
  25:Generated_Source\PSoC4/PM.c **** volatile int16 PM_offset[PM_TOTAL_CHANNELS_NUM];
  26:Generated_Source\PSoC4/PM.c **** volatile int32 PM_countsPer10Volt[PM_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:Generated_Source\PSoC4/PM.c **** 
  28:Generated_Source\PSoC4/PM.c **** 
  29:Generated_Source\PSoC4/PM.c **** /***************************************
  30:Generated_Source\PSoC4/PM.c **** * Local data allocation
  31:Generated_Source\PSoC4/PM.c **** ***************************************/
  32:Generated_Source\PSoC4/PM.c **** /* Channels configuration generated by customiser */
  33:Generated_Source\PSoC4/PM.c **** static const uint32 CYCODE PM_channelsConfig[] = { 0x00000000u };
  34:Generated_Source\PSoC4/PM.c **** 
  35:Generated_Source\PSoC4/PM.c **** 
  36:Generated_Source\PSoC4/PM.c **** /*******************************************************************************
  37:Generated_Source\PSoC4/PM.c **** * Function Name: PM_Start
  38:Generated_Source\PSoC4/PM.c **** ********************************************************************************
  39:Generated_Source\PSoC4/PM.c **** *
  40:Generated_Source\PSoC4/PM.c **** * Summary:
  41:Generated_Source\PSoC4/PM.c **** *  Performs all required initialization for this component
  42:Generated_Source\PSoC4/PM.c **** *  and enables the power. The power will be set to the appropriate
  43:Generated_Source\PSoC4/PM.c **** *  power based on the clock frequency.
  44:Generated_Source\PSoC4/PM.c **** *
  45:Generated_Source\PSoC4/PM.c **** * Parameters:
  46:Generated_Source\PSoC4/PM.c **** *  None.
  47:Generated_Source\PSoC4/PM.c **** *
  48:Generated_Source\PSoC4/PM.c **** * Return:
  49:Generated_Source\PSoC4/PM.c **** *  None.
  50:Generated_Source\PSoC4/PM.c **** *
  51:Generated_Source\PSoC4/PM.c **** * Global variables:
  52:Generated_Source\PSoC4/PM.c **** *  The PM_initVar variable is used to indicate when/if initial
  53:Generated_Source\PSoC4/PM.c **** *  configuration of this component has happened. The variable is initialized to
  54:Generated_Source\PSoC4/PM.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:Generated_Source\PSoC4/PM.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:Generated_Source\PSoC4/PM.c **** *  PM_Start() routine.
  57:Generated_Source\PSoC4/PM.c **** *  If re-initialization of the component is required the variable should be set
  58:Generated_Source\PSoC4/PM.c **** *  to zero before call of PM_Start() routine, or the user may call
  59:Generated_Source\PSoC4/PM.c **** *  PM_Init() and PM_Enable() as done in the
  60:Generated_Source\PSoC4/PM.c **** *  PM_Start() routine.
  61:Generated_Source\PSoC4/PM.c **** *
  62:Generated_Source\PSoC4/PM.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/PM.c **** void PM_Start(void)
  64:Generated_Source\PSoC4/PM.c **** {
  42              		.loc 1 64 0
  43              		.cfi_startproc
  44              		@ args = 0, pretend = 0, frame = 0
  45              		@ frame_needed = 1, uses_anonymous_args = 0
  46 0000 80B5     		push	{r7, lr}
  47              		.cfi_def_cfa_offset 8
  48              		.cfi_offset 7, -8
  49              		.cfi_offset 14, -4
  50 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 3


  51              		.cfi_def_cfa_register 7
  65:Generated_Source\PSoC4/PM.c ****     /* If not Initialized then initialize all required hardware and software */
  66:Generated_Source\PSoC4/PM.c ****     if(PM_initVar == 0u)
  52              		.loc 1 66 0
  53 0004 064B     		ldr	r3, .L3
  54 0006 1B78     		ldrb	r3, [r3]
  55 0008 002B     		cmp	r3, #0
  56 000a 04D1     		bne	.L2
  67:Generated_Source\PSoC4/PM.c ****     {
  68:Generated_Source\PSoC4/PM.c ****         PM_Init();
  57              		.loc 1 68 0
  58 000c FFF7FEFF 		bl	PM_Init
  69:Generated_Source\PSoC4/PM.c ****         PM_initVar = 1u;
  59              		.loc 1 69 0
  60 0010 034B     		ldr	r3, .L3
  61 0012 0122     		movs	r2, #1
  62 0014 1A70     		strb	r2, [r3]
  63              	.L2:
  70:Generated_Source\PSoC4/PM.c ****     }
  71:Generated_Source\PSoC4/PM.c ****     PM_Enable();
  64              		.loc 1 71 0
  65 0016 FFF7FEFF 		bl	PM_Enable
  72:Generated_Source\PSoC4/PM.c **** }
  66              		.loc 1 72 0
  67 001a C046     		nop
  68 001c BD46     		mov	sp, r7
  69              		@ sp needed
  70 001e 80BD     		pop	{r7, pc}
  71              	.L4:
  72              		.align	2
  73              	.L3:
  74 0020 00000000 		.word	PM_initVar
  75              		.cfi_endproc
  76              	.LFE2:
  77              		.size	PM_Start, .-PM_Start
  78              		.global	__aeabi_idiv
  79              		.section	.text.PM_Init,"ax",%progbits
  80              		.align	2
  81              		.global	PM_Init
  82              		.code	16
  83              		.thumb_func
  84              		.type	PM_Init, %function
  85              	PM_Init:
  86              	.LFB3:
  73:Generated_Source\PSoC4/PM.c **** 
  74:Generated_Source\PSoC4/PM.c **** 
  75:Generated_Source\PSoC4/PM.c **** /*******************************************************************************
  76:Generated_Source\PSoC4/PM.c **** * Function Name: PM_Init
  77:Generated_Source\PSoC4/PM.c **** ********************************************************************************
  78:Generated_Source\PSoC4/PM.c **** *
  79:Generated_Source\PSoC4/PM.c **** * Summary:
  80:Generated_Source\PSoC4/PM.c **** *  Initialize component's parameters to the parameters set by user in the
  81:Generated_Source\PSoC4/PM.c **** *  customizer of the component placed onto schematic. Usually called in
  82:Generated_Source\PSoC4/PM.c **** *  PM_Start().
  83:Generated_Source\PSoC4/PM.c **** *
  84:Generated_Source\PSoC4/PM.c **** * Parameters:
  85:Generated_Source\PSoC4/PM.c **** *  None.
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 4


  86:Generated_Source\PSoC4/PM.c **** *
  87:Generated_Source\PSoC4/PM.c **** * Return:
  88:Generated_Source\PSoC4/PM.c **** *  None.
  89:Generated_Source\PSoC4/PM.c **** *
  90:Generated_Source\PSoC4/PM.c **** * Global variables:
  91:Generated_Source\PSoC4/PM.c **** *  The PM_offset variable is initialized.
  92:Generated_Source\PSoC4/PM.c **** *
  93:Generated_Source\PSoC4/PM.c **** *******************************************************************************/
  94:Generated_Source\PSoC4/PM.c **** void PM_Init(void)
  95:Generated_Source\PSoC4/PM.c **** {
  87              		.loc 1 95 0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 16
  90              		@ frame_needed = 1, uses_anonymous_args = 0
  91 0000 80B5     		push	{r7, lr}
  92              		.cfi_def_cfa_offset 8
  93              		.cfi_offset 7, -8
  94              		.cfi_offset 14, -4
  95 0002 84B0     		sub	sp, sp, #16
  96              		.cfi_def_cfa_offset 24
  97 0004 00AF     		add	r7, sp, #0
  98              		.cfi_def_cfa_register 7
  96:Generated_Source\PSoC4/PM.c ****     uint32 chNum;
  97:Generated_Source\PSoC4/PM.c ****     uint32 tmpRegVal;
  98:Generated_Source\PSoC4/PM.c ****     int32 counts;
  99:Generated_Source\PSoC4/PM.c **** 
 100:Generated_Source\PSoC4/PM.c ****     #if(PM_TOTAL_CHANNELS_NUM > 1u)
 101:Generated_Source\PSoC4/PM.c ****         static const uint8 CYCODE PM_InputsPlacement[] =
 102:Generated_Source\PSoC4/PM.c ****         {
 103:Generated_Source\PSoC4/PM.c ****             (uint8)(PM_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:Generated_Source\PSoC4/PM.c ****             (uint8)PM_cy_psoc4_sarmux_8__CH_0_PIN
 105:Generated_Source\PSoC4/PM.c ****             ,(uint8)(PM_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:Generated_Source\PSoC4/PM.c ****              (uint8)PM_cy_psoc4_sarmux_8__CH_1_PIN
 107:Generated_Source\PSoC4/PM.c ****             #if(PM_TOTAL_CHANNELS_NUM > 2u)
 108:Generated_Source\PSoC4/PM.c ****                 ,(uint8)(PM_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:Generated_Source\PSoC4/PM.c ****                  (uint8)PM_cy_psoc4_sarmux_8__CH_2_PIN
 110:Generated_Source\PSoC4/PM.c ****             #endif /* End PM_TOTAL_CHANNELS_NUM > 2u */
 111:Generated_Source\PSoC4/PM.c ****             #if(PM_TOTAL_CHANNELS_NUM > 3u)
 112:Generated_Source\PSoC4/PM.c ****                 ,(uint8)(PM_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:Generated_Source\PSoC4/PM.c ****                  (uint8)PM_cy_psoc4_sarmux_8__CH_3_PIN
 114:Generated_Source\PSoC4/PM.c ****             #endif /* End PM_TOTAL_CHANNELS_NUM > 3u */
 115:Generated_Source\PSoC4/PM.c ****             #if(PM_TOTAL_CHANNELS_NUM > 4u)
 116:Generated_Source\PSoC4/PM.c ****                 ,(uint8)(PM_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:Generated_Source\PSoC4/PM.c ****                  (uint8)PM_cy_psoc4_sarmux_8__CH_4_PIN
 118:Generated_Source\PSoC4/PM.c ****             #endif /* End PM_TOTAL_CHANNELS_NUM > 4u */
 119:Generated_Source\PSoC4/PM.c ****             #if(PM_TOTAL_CHANNELS_NUM > 5u)
 120:Generated_Source\PSoC4/PM.c ****                 ,(uint8)(PM_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:Generated_Source\PSoC4/PM.c ****                  (uint8)PM_cy_psoc4_sarmux_8__CH_5_PIN
 122:Generated_Source\PSoC4/PM.c ****             #endif /* End PM_TOTAL_CHANNELS_NUM > 5u */
 123:Generated_Source\PSoC4/PM.c ****             #if(PM_TOTAL_CHANNELS_NUM > 6u)
 124:Generated_Source\PSoC4/PM.c ****                 ,(uint8)(PM_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:Generated_Source\PSoC4/PM.c ****                  (uint8)PM_cy_psoc4_sarmux_8__CH_6_PIN
 126:Generated_Source\PSoC4/PM.c ****             #endif /* End PM_TOTAL_CHANNELS_NUM > 6u */
 127:Generated_Source\PSoC4/PM.c ****             #if(PM_TOTAL_CHANNELS_NUM > 7u)
 128:Generated_Source\PSoC4/PM.c ****                 ,(uint8)(PM_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:Generated_Source\PSoC4/PM.c ****                  (uint8)PM_cy_psoc4_sarmux_8__CH_7_PIN
 130:Generated_Source\PSoC4/PM.c ****             #endif /* End PM_TOTAL_CHANNELS_NUM > 7u */
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 5


 131:Generated_Source\PSoC4/PM.c ****             #if(PM_TOTAL_CHANNELS_NUM > 8u)
 132:Generated_Source\PSoC4/PM.c ****                 ,(uint8)(PM_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:Generated_Source\PSoC4/PM.c ****                  (uint8)PM_cy_psoc4_sarmux_8__CH_8_PIN
 134:Generated_Source\PSoC4/PM.c ****             #endif /* End PM_TOTAL_CHANNELS_NUM > 8u */
 135:Generated_Source\PSoC4/PM.c ****             #if(PM_TOTAL_CHANNELS_NUM > 9u)
 136:Generated_Source\PSoC4/PM.c ****                 ,(uint8)(PM_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:Generated_Source\PSoC4/PM.c ****                  (uint8)PM_cy_psoc4_sarmux_8__CH_9_PIN
 138:Generated_Source\PSoC4/PM.c ****             #endif /* End PM_TOTAL_CHANNELS_NUM > 9u */
 139:Generated_Source\PSoC4/PM.c ****             #if(PM_TOTAL_CHANNELS_NUM > 10u)
 140:Generated_Source\PSoC4/PM.c ****                 ,(uint8)(PM_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:Generated_Source\PSoC4/PM.c ****                  (uint8)PM_cy_psoc4_sarmux_8__CH_10_PIN
 142:Generated_Source\PSoC4/PM.c ****             #endif /* End PM_TOTAL_CHANNELS_NUM > 10u */
 143:Generated_Source\PSoC4/PM.c ****             #if(PM_TOTAL_CHANNELS_NUM > 11u)
 144:Generated_Source\PSoC4/PM.c ****                 ,(uint8)(PM_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:Generated_Source\PSoC4/PM.c ****                  (uint8)PM_cy_psoc4_sarmux_8__CH_11_PIN
 146:Generated_Source\PSoC4/PM.c ****             #endif /* End PM_TOTAL_CHANNELS_NUM > 11u */
 147:Generated_Source\PSoC4/PM.c ****             #if(PM_TOTAL_CHANNELS_NUM > 12u)
 148:Generated_Source\PSoC4/PM.c ****                 ,(uint8)(PM_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:Generated_Source\PSoC4/PM.c ****                  (uint8)PM_cy_psoc4_sarmux_8__CH_12_PIN
 150:Generated_Source\PSoC4/PM.c ****             #endif /* End PM_TOTAL_CHANNELS_NUM > 12u */
 151:Generated_Source\PSoC4/PM.c ****             #if(PM_TOTAL_CHANNELS_NUM > 13u)
 152:Generated_Source\PSoC4/PM.c ****                 ,(uint8)(PM_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:Generated_Source\PSoC4/PM.c ****                  (uint8)PM_cy_psoc4_sarmux_8__CH_13_PIN
 154:Generated_Source\PSoC4/PM.c ****             #endif /* End PM_TOTAL_CHANNELS_NUM > 13u */
 155:Generated_Source\PSoC4/PM.c ****             #if(PM_TOTAL_CHANNELS_NUM > 14u)
 156:Generated_Source\PSoC4/PM.c ****                 ,(uint8)(PM_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:Generated_Source\PSoC4/PM.c ****                  (uint8)PM_cy_psoc4_sarmux_8__CH_14_PIN
 158:Generated_Source\PSoC4/PM.c ****             #endif /* End PM_TOTAL_CHANNELS_NUM > 14u */
 159:Generated_Source\PSoC4/PM.c ****             #if(PM_TOTAL_CHANNELS_NUM > 15u)
 160:Generated_Source\PSoC4/PM.c ****                 ,(uint8)(PM_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:Generated_Source\PSoC4/PM.c ****                  (uint8)PM_cy_psoc4_sarmux_8__CH_15_PIN
 162:Generated_Source\PSoC4/PM.c ****             #endif /* End PM_TOTAL_CHANNELS_NUM > 15u */
 163:Generated_Source\PSoC4/PM.c ****             #if(PM_TOTAL_CHANNELS_NUM > 16u)
 164:Generated_Source\PSoC4/PM.c ****                 ,(uint8)(PM_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:Generated_Source\PSoC4/PM.c ****                  (uint8)PM_cy_psoc4_sarmux_8__CH_16_PIN
 166:Generated_Source\PSoC4/PM.c ****             #endif /* End PM_TOTAL_CHANNELS_NUM > 16u */
 167:Generated_Source\PSoC4/PM.c ****         };
 168:Generated_Source\PSoC4/PM.c ****     #endif /* End PM_TOTAL_CHANNELS_NUM > 1u */
 169:Generated_Source\PSoC4/PM.c **** 
 170:Generated_Source\PSoC4/PM.c ****     #if(PM_IRQ_REMOVE == 0u)
 171:Generated_Source\PSoC4/PM.c ****         /* Start and set interrupt vector */
 172:Generated_Source\PSoC4/PM.c ****         CyIntSetPriority(PM_INTC_NUMBER, PM_INTC_PRIOR_NUMBER);
  99              		.loc 1 172 0
 100 0006 0321     		movs	r1, #3
 101 0008 0F20     		movs	r0, #15
 102 000a FFF7FEFF 		bl	CyIntSetPriority
 173:Generated_Source\PSoC4/PM.c ****         (void)CyIntSetVector(PM_INTC_NUMBER, &PM_ISR);
 103              		.loc 1 173 0
 104 000e 554B     		ldr	r3, .L16
 105 0010 1900     		movs	r1, r3
 106 0012 0F20     		movs	r0, #15
 107 0014 FFF7FEFF 		bl	CyIntSetVector
 174:Generated_Source\PSoC4/PM.c ****     #endif   /* End PM_IRQ_REMOVE */
 175:Generated_Source\PSoC4/PM.c **** 
 176:Generated_Source\PSoC4/PM.c ****     /* Init SAR and MUX registers */
 177:Generated_Source\PSoC4/PM.c ****     PM_SAR_CHAN_EN_REG = PM_DEFAULT_EN_CHANNELS;
 108              		.loc 1 177 0
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 6


 109 0018 534B     		ldr	r3, .L16+4
 110 001a 0122     		movs	r2, #1
 111 001c 1A60     		str	r2, [r3]
 178:Generated_Source\PSoC4/PM.c ****     PM_SAR_CTRL_REG |= PM_DEFAULT_CTRL_REG_CFG | 
 179:Generated_Source\PSoC4/PM.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:Generated_Source\PSoC4/PM.c ****         (((PM_PUMP_CTRL_REG & PM_PUMP_CTRL_ENABLED) != 0u) ? 
 112              		.loc 1 180 0
 113 001e 534B     		ldr	r3, .L16+8
 114 0020 1B68     		ldr	r3, [r3]
 178:Generated_Source\PSoC4/PM.c ****     PM_SAR_CTRL_REG |= PM_DEFAULT_CTRL_REG_CFG | 
 115              		.loc 1 178 0
 116 0022 002B     		cmp	r3, #0
 117 0024 01DA     		bge	.L6
 178:Generated_Source\PSoC4/PM.c ****     PM_SAR_CTRL_REG |= PM_DEFAULT_CTRL_REG_CFG | 
 118              		.loc 1 178 0 is_stmt 0 discriminator 1
 119 0026 5249     		ldr	r1, .L16+12
 120 0028 00E0     		b	.L7
 121              	.L6:
 178:Generated_Source\PSoC4/PM.c ****     PM_SAR_CTRL_REG |= PM_DEFAULT_CTRL_REG_CFG | 
 122              		.loc 1 178 0 discriminator 2
 123 002a 5249     		ldr	r1, .L16+16
 124              	.L7:
 178:Generated_Source\PSoC4/PM.c ****     PM_SAR_CTRL_REG |= PM_DEFAULT_CTRL_REG_CFG | 
 125              		.loc 1 178 0 discriminator 4
 126 002c 524B     		ldr	r3, .L16+20
 127 002e 524A     		ldr	r2, .L16+20
 128 0030 1268     		ldr	r2, [r2]
 129 0032 0A43     		orrs	r2, r1
 130 0034 1A60     		str	r2, [r3]
 181:Generated_Source\PSoC4/PM.c ****         PM_BOOSTPUMP_EN : 0u);
 182:Generated_Source\PSoC4/PM.c ****     PM_SAR_SAMPLE_CTRL_REG = PM_DEFAULT_SAMPLE_CTRL_REG_CFG;
 131              		.loc 1 182 0 is_stmt 1 discriminator 4
 132 0036 514B     		ldr	r3, .L16+24
 133 0038 514A     		ldr	r2, .L16+28
 134 003a 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/PM.c ****     PM_SAR_RANGE_THRES_REG = PM_DEFAULT_RANGE_THRES_REG_CFG;
 135              		.loc 1 183 0 discriminator 4
 136 003c 514B     		ldr	r3, .L16+32
 137 003e 524A     		ldr	r2, .L16+36
 138 0040 1A60     		str	r2, [r3]
 184:Generated_Source\PSoC4/PM.c ****     PM_SAR_RANGE_COND_REG  = PM_COMPARE_MODE;
 139              		.loc 1 184 0 discriminator 4
 140 0042 524B     		ldr	r3, .L16+40
 141 0044 0022     		movs	r2, #0
 142 0046 1A60     		str	r2, [r3]
 185:Generated_Source\PSoC4/PM.c ****     PM_SAR_SAMPLE_TIME01_REG = PM_DEFAULT_SAMPLE_TIME01_REG_CFG;
 143              		.loc 1 185 0 discriminator 4
 144 0048 514B     		ldr	r3, .L16+44
 145 004a 524A     		ldr	r2, .L16+48
 146 004c 1A60     		str	r2, [r3]
 186:Generated_Source\PSoC4/PM.c ****     PM_SAR_SAMPLE_TIME23_REG = PM_DEFAULT_SAMPLE_TIME23_REG_CFG;
 147              		.loc 1 186 0 discriminator 4
 148 004e 524B     		ldr	r3, .L16+52
 149 0050 504A     		ldr	r2, .L16+48
 150 0052 1A60     		str	r2, [r3]
 187:Generated_Source\PSoC4/PM.c ****     
 188:Generated_Source\PSoC4/PM.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 7


 189:Generated_Source\PSoC4/PM.c ****     #if(PM_DEFAULT_MUX_SWITCH0 != 0u)
 190:Generated_Source\PSoC4/PM.c ****         PM_MUX_SWITCH0_REG |= PM_DEFAULT_MUX_SWITCH0;
 151              		.loc 1 190 0 discriminator 4
 152 0054 514B     		ldr	r3, .L16+56
 153 0056 514A     		ldr	r2, .L16+56
 154 0058 1268     		ldr	r2, [r2]
 155 005a 8021     		movs	r1, #128
 156 005c 4902     		lsls	r1, r1, #9
 157 005e 0A43     		orrs	r2, r1
 158 0060 1A60     		str	r2, [r3]
 191:Generated_Source\PSoC4/PM.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:Generated_Source\PSoC4/PM.c ****         #if(PM_TOTAL_CHANNELS_NUM > 1u)
 193:Generated_Source\PSoC4/PM.c ****             PM_MUX_SWITCH_HW_CTRL_REG |= PM_DEFAULT_MUX_SWITCH0;
 194:Generated_Source\PSoC4/PM.c ****         #endif /* PM_TOTAL_CHANNELS_NUM > 1u */
 195:Generated_Source\PSoC4/PM.c ****     #endif /*PM_CHANNELS_MODE !=0 */
 196:Generated_Source\PSoC4/PM.c **** 
 197:Generated_Source\PSoC4/PM.c ****     PM_SAR_SATURATE_INTR_MASK_REG = 0u;
 159              		.loc 1 197 0 discriminator 4
 160 0062 4F4B     		ldr	r3, .L16+60
 161 0064 0022     		movs	r2, #0
 162 0066 1A60     		str	r2, [r3]
 198:Generated_Source\PSoC4/PM.c ****     PM_SAR_RANGE_INTR_MASK_REG = 0u;
 163              		.loc 1 198 0 discriminator 4
 164 0068 4E4B     		ldr	r3, .L16+64
 165 006a 0022     		movs	r2, #0
 166 006c 1A60     		str	r2, [r3]
 199:Generated_Source\PSoC4/PM.c ****     PM_SAR_INTR_MASK_REG = PM_SAR_INTR_MASK;
 167              		.loc 1 199 0 discriminator 4
 168 006e 4E4B     		ldr	r3, .L16+68
 169 0070 0122     		movs	r2, #1
 170 0072 1A60     		str	r2, [r3]
 200:Generated_Source\PSoC4/PM.c **** 
 201:Generated_Source\PSoC4/PM.c ****     #if(PM_CY_SAR_IP_VER == PM_CY_SAR_IP_VER0)
 202:Generated_Source\PSoC4/PM.c ****         PM_ANA_TRIM_REG = PM_TRIM_COEF;
 203:Generated_Source\PSoC4/PM.c ****     #endif /* (PM_CY_SAR_IP_VER == PM_CY_SAR_IP_VER0) */
 204:Generated_Source\PSoC4/PM.c **** 
 205:Generated_Source\PSoC4/PM.c ****     /* Read and modify default configuration based on characterization */
 206:Generated_Source\PSoC4/PM.c ****     tmpRegVal = PM_SAR_DFT_CTRL_REG;
 171              		.loc 1 206 0 discriminator 4
 172 0074 4D4B     		ldr	r3, .L16+72
 173 0076 1B68     		ldr	r3, [r3]
 174 0078 7B60     		str	r3, [r7, #4]
 207:Generated_Source\PSoC4/PM.c ****     tmpRegVal &= (uint32)~PM_DCEN;
 175              		.loc 1 207 0 discriminator 4
 176 007a 7B68     		ldr	r3, [r7, #4]
 177 007c 4C4A     		ldr	r2, .L16+76
 178 007e 1340     		ands	r3, r2
 179 0080 7B60     		str	r3, [r7, #4]
 208:Generated_Source\PSoC4/PM.c ****     
 209:Generated_Source\PSoC4/PM.c ****     #if(PM_CY_SAR_IP_VER == PM_CY_SAR_IP_VER0)
 210:Generated_Source\PSoC4/PM.c ****         #if(PM_NOMINAL_CLOCK_FREQ > (PM_MAX_FREQUENCY / 2))
 211:Generated_Source\PSoC4/PM.c ****             tmpRegVal |= PM_SEL_CSEL_DFT_CHAR;
 212:Generated_Source\PSoC4/PM.c ****         #else  /* clock speed < 9 Mhz */
 213:Generated_Source\PSoC4/PM.c ****             tmpRegVal |= PM_DLY_INC;
 214:Generated_Source\PSoC4/PM.c ****         #endif /* clock speed > 9 Mhz */
 215:Generated_Source\PSoC4/PM.c ****     #else
 216:Generated_Source\PSoC4/PM.c ****         #if ((PM_DEFAULT_VREF_SEL == PM__INTERNAL1024) || \
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 8


 217:Generated_Source\PSoC4/PM.c ****              (PM_DEFAULT_VREF_SEL == PM__INTERNALVREF))
 218:Generated_Source\PSoC4/PM.c ****             tmpRegVal |= PM_DLY_INC;
 219:Generated_Source\PSoC4/PM.c ****         #else
 220:Generated_Source\PSoC4/PM.c ****             tmpRegVal |= PM_DCEN;
 180              		.loc 1 220 0 discriminator 4
 181 0082 7B68     		ldr	r3, [r7, #4]
 182 0084 8022     		movs	r2, #128
 183 0086 9205     		lsls	r2, r2, #22
 184 0088 1343     		orrs	r3, r2
 185 008a 7B60     		str	r3, [r7, #4]
 221:Generated_Source\PSoC4/PM.c ****             tmpRegVal &= (uint32)~PM_DLY_INC;
 186              		.loc 1 221 0 discriminator 4
 187 008c 7B68     		ldr	r3, [r7, #4]
 188 008e 0122     		movs	r2, #1
 189 0090 9343     		bics	r3, r2
 190 0092 7B60     		str	r3, [r7, #4]
 222:Generated_Source\PSoC4/PM.c ****         #endif /* ((PM_DEFAULT_VREF_SEL == PM__INTERNAL1024) || \
 223:Generated_Source\PSoC4/PM.c ****                    (PM_DEFAULT_VREF_SEL == PM__INTERNALVREF)) */
 224:Generated_Source\PSoC4/PM.c ****     #endif /* (PM_CY_SAR_IP_VER == PM_CY_SAR_IP_VER0) */
 225:Generated_Source\PSoC4/PM.c ****     
 226:Generated_Source\PSoC4/PM.c ****     PM_SAR_DFT_CTRL_REG = tmpRegVal;
 191              		.loc 1 226 0 discriminator 4
 192 0094 454B     		ldr	r3, .L16+72
 193 0096 7A68     		ldr	r2, [r7, #4]
 194 0098 1A60     		str	r2, [r3]
 227:Generated_Source\PSoC4/PM.c **** 
 228:Generated_Source\PSoC4/PM.c ****     #if(PM_MAX_RESOLUTION != PM_RESOLUTION_12)
 229:Generated_Source\PSoC4/PM.c ****         PM_WOUNDING_REG = PM_ALT_WOUNDING;
 230:Generated_Source\PSoC4/PM.c ****     #endif /* PM_MAX_RESOLUTION != PM_RESOLUTION_12 */
 231:Generated_Source\PSoC4/PM.c **** 
 232:Generated_Source\PSoC4/PM.c ****     for(chNum = 0u; chNum < PM_TOTAL_CHANNELS_NUM; chNum++)
 195              		.loc 1 232 0 discriminator 4
 196 009a 0023     		movs	r3, #0
 197 009c FB60     		str	r3, [r7, #12]
 198 009e 59E0     		b	.L8
 199              	.L15:
 233:Generated_Source\PSoC4/PM.c ****     {
 234:Generated_Source\PSoC4/PM.c ****         tmpRegVal = (PM_channelsConfig[chNum] & PM_CHANNEL_CONFIG_MASK);
 200              		.loc 1 234 0
 201 00a0 0022     		movs	r2, #0
 202 00a2 DC23     		movs	r3, #220
 203 00a4 9B01     		lsls	r3, r3, #6
 204 00a6 1340     		ands	r3, r2
 205 00a8 7B60     		str	r3, [r7, #4]
 235:Generated_Source\PSoC4/PM.c ****         #if(PM_TOTAL_CHANNELS_NUM > 1u)
 236:Generated_Source\PSoC4/PM.c ****             tmpRegVal |= PM_InputsPlacement[chNum];
 237:Generated_Source\PSoC4/PM.c ****         #endif /* End PM_TOTAL_CHANNELS_NUM > 1u */
 238:Generated_Source\PSoC4/PM.c ****         
 239:Generated_Source\PSoC4/PM.c ****         
 240:Generated_Source\PSoC4/PM.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:Generated_Source\PSoC4/PM.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:Generated_Source\PSoC4/PM.c ****         *  (0) and 8-bit (1) resolution.
 243:Generated_Source\PSoC4/PM.c ****         */
 244:Generated_Source\PSoC4/PM.c ****         #if((PM_MAX_RESOLUTION != PM_RESOLUTION_12) && \
 245:Generated_Source\PSoC4/PM.c ****             (PM_ALT_WOUNDING == PM_WOUNDING_10BIT))
 246:Generated_Source\PSoC4/PM.c ****             tmpRegVal &= (uint32)(~PM_ALT_RESOLUTION_ON);
 247:Generated_Source\PSoC4/PM.c ****         #endif /* PM_MAX_RESOLUTION != PM_RESOLUTION_12 */
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 9


 248:Generated_Source\PSoC4/PM.c **** 
 249:Generated_Source\PSoC4/PM.c ****         #if(PM_INJ_CHANNEL_ENABLED)
 250:Generated_Source\PSoC4/PM.c ****         if(chNum < PM_SEQUENCED_CHANNELS_NUM)
 251:Generated_Source\PSoC4/PM.c ****         #endif /* PM_INJ_CHANNEL_ENABLED */
 252:Generated_Source\PSoC4/PM.c ****         {
 253:Generated_Source\PSoC4/PM.c ****             CY_SET_REG32((reg32 *)(PM_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 206              		.loc 1 253 0
 207 00aa FB68     		ldr	r3, [r7, #12]
 208 00ac 9B00     		lsls	r3, r3, #2
 209 00ae 414A     		ldr	r2, .L16+80
 210 00b0 9446     		mov	ip, r2
 211 00b2 6344     		add	r3, r3, ip
 212 00b4 7A68     		ldr	r2, [r7, #4]
 213 00b6 1A60     		str	r2, [r3]
 254:Generated_Source\PSoC4/PM.c **** 
 255:Generated_Source\PSoC4/PM.c ****             if((PM_channelsConfig[chNum] & PM_IS_SATURATE_EN_MASK) != 0u)
 214              		.loc 1 255 0
 215 00b8 0022     		movs	r2, #0
 216 00ba 0123     		movs	r3, #1
 217 00bc 1340     		ands	r3, r2
 218 00be 0AD0     		beq	.L9
 256:Generated_Source\PSoC4/PM.c ****             {
 257:Generated_Source\PSoC4/PM.c ****                 PM_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 219              		.loc 1 257 0
 220 00c0 374B     		ldr	r3, .L16+60
 221 00c2 374A     		ldr	r2, .L16+60
 222 00c4 1168     		ldr	r1, [r2]
 223 00c6 0120     		movs	r0, #1
 224 00c8 FA68     		ldr	r2, [r7, #12]
 225 00ca 9040     		lsls	r0, r0, r2
 226 00cc 0200     		movs	r2, r0
 227 00ce 1204     		lsls	r2, r2, #16
 228 00d0 120C     		lsrs	r2, r2, #16
 229 00d2 0A43     		orrs	r2, r1
 230 00d4 1A60     		str	r2, [r3]
 231              	.L9:
 258:Generated_Source\PSoC4/PM.c ****             }
 259:Generated_Source\PSoC4/PM.c **** 
 260:Generated_Source\PSoC4/PM.c ****             if((PM_channelsConfig[chNum] & PM_IS_RANGE_CTRL_EN_MASK) != 0u)
 232              		.loc 1 260 0
 233 00d6 0022     		movs	r2, #0
 234 00d8 0223     		movs	r3, #2
 235 00da 1340     		ands	r3, r2
 236 00dc 0AD0     		beq	.L10
 261:Generated_Source\PSoC4/PM.c ****             {
 262:Generated_Source\PSoC4/PM.c ****                 PM_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 237              		.loc 1 262 0
 238 00de 314B     		ldr	r3, .L16+64
 239 00e0 304A     		ldr	r2, .L16+64
 240 00e2 1168     		ldr	r1, [r2]
 241 00e4 0120     		movs	r0, #1
 242 00e6 FA68     		ldr	r2, [r7, #12]
 243 00e8 9040     		lsls	r0, r0, r2
 244 00ea 0200     		movs	r2, r0
 245 00ec 1204     		lsls	r2, r2, #16
 246 00ee 120C     		lsrs	r2, r2, #16
 247 00f0 0A43     		orrs	r2, r1
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 10


 248 00f2 1A60     		str	r2, [r3]
 249              	.L10:
 263:Generated_Source\PSoC4/PM.c ****             }
 264:Generated_Source\PSoC4/PM.c ****         }
 265:Generated_Source\PSoC4/PM.c ****         #if(PM_INJ_CHANNEL_ENABLED)
 266:Generated_Source\PSoC4/PM.c ****             else
 267:Generated_Source\PSoC4/PM.c ****             {
 268:Generated_Source\PSoC4/PM.c ****                 CY_SET_REG32(PM_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | PM_INJ_TAILGATING);
 269:Generated_Source\PSoC4/PM.c **** 
 270:Generated_Source\PSoC4/PM.c ****                 if((PM_channelsConfig[chNum] & PM_IS_SATURATE_EN_MASK) != 0u)
 271:Generated_Source\PSoC4/PM.c ****                 {
 272:Generated_Source\PSoC4/PM.c ****                     PM_SAR_INTR_MASK_REG |= PM_INJ_SATURATE_MASK;
 273:Generated_Source\PSoC4/PM.c ****                 }
 274:Generated_Source\PSoC4/PM.c **** 
 275:Generated_Source\PSoC4/PM.c ****                 if((PM_channelsConfig[chNum] & PM_IS_RANGE_CTRL_EN_MASK) != 0u)
 276:Generated_Source\PSoC4/PM.c ****                 {
 277:Generated_Source\PSoC4/PM.c ****                     PM_SAR_INTR_MASK_REG |= PM_INJ_RANGE_MASK;
 278:Generated_Source\PSoC4/PM.c ****                 }
 279:Generated_Source\PSoC4/PM.c ****             }
 280:Generated_Source\PSoC4/PM.c ****         #endif /* PM_INJ_CHANNEL_ENABLED */
 281:Generated_Source\PSoC4/PM.c **** 
 282:Generated_Source\PSoC4/PM.c ****         if((PM_channelsConfig[chNum] & PM_ALT_RESOLUTION_ON) != 0u)
 250              		.loc 1 282 0
 251 00f4 0022     		movs	r2, #0
 252 00f6 8023     		movs	r3, #128
 253 00f8 9B00     		lsls	r3, r3, #2
 254 00fa 1340     		ands	r3, r2
 255 00fc 03D0     		beq	.L11
 283:Generated_Source\PSoC4/PM.c ****         {
 284:Generated_Source\PSoC4/PM.c ****                counts = (int32)PM_DEFAULT_MAX_WRK_ALT;
 256              		.loc 1 284 0
 257 00fe 8023     		movs	r3, #128
 258 0100 5B00     		lsls	r3, r3, #1
 259 0102 BB60     		str	r3, [r7, #8]
 260 0104 02E0     		b	.L12
 261              	.L11:
 285:Generated_Source\PSoC4/PM.c ****         }
 286:Generated_Source\PSoC4/PM.c ****         else
 287:Generated_Source\PSoC4/PM.c ****         {
 288:Generated_Source\PSoC4/PM.c ****                counts = (int32)PM_SAR_WRK_MAX_12BIT;
 262              		.loc 1 288 0
 263 0106 8023     		movs	r3, #128
 264 0108 5B01     		lsls	r3, r3, #5
 265 010a BB60     		str	r3, [r7, #8]
 266              	.L12:
 289:Generated_Source\PSoC4/PM.c ****         }
 290:Generated_Source\PSoC4/PM.c **** 
 291:Generated_Source\PSoC4/PM.c ****         if((PM_channelsConfig[chNum] & PM_DIFFERENTIAL_EN) == 0u)
 267              		.loc 1 291 0
 268 010c 0022     		movs	r2, #0
 269 010e 8023     		movs	r3, #128
 270 0110 5B00     		lsls	r3, r3, #1
 271 0112 1340     		ands	r3, r2
 272 0114 05D1     		bne	.L13
 292:Generated_Source\PSoC4/PM.c ****         {
 293:Generated_Source\PSoC4/PM.c ****             #if((PM_DEFAULT_SE_RESULT_FORMAT_SEL == PM__FSIGNED) && \
 294:Generated_Source\PSoC4/PM.c ****                 (PM_DEFAULT_NEG_INPUT_SEL == PM__VREF))
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 11


 295:Generated_Source\PSoC4/PM.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:Generated_Source\PSoC4/PM.c ****                 PM_offset[chNum] = (int16)(counts / -2);
 297:Generated_Source\PSoC4/PM.c ****             #else
 298:Generated_Source\PSoC4/PM.c ****                 PM_offset[chNum] = 0;
 273              		.loc 1 298 0
 274 0116 284B     		ldr	r3, .L16+84
 275 0118 FA68     		ldr	r2, [r7, #12]
 276 011a 5200     		lsls	r2, r2, #1
 277 011c 0021     		movs	r1, #0
 278 011e D152     		strh	r1, [r2, r3]
 279 0120 04E0     		b	.L14
 280              	.L13:
 299:Generated_Source\PSoC4/PM.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == PM__FSIGNED */
 300:Generated_Source\PSoC4/PM.c ****         }
 301:Generated_Source\PSoC4/PM.c ****         else    /* Differential channel */
 302:Generated_Source\PSoC4/PM.c ****         {
 303:Generated_Source\PSoC4/PM.c ****             #if(PM_DEFAULT_DIFF_RESULT_FORMAT_SEL == PM__FUNSIGNED)
 304:Generated_Source\PSoC4/PM.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:Generated_Source\PSoC4/PM.c ****                 PM_offset[chNum] = (int16)(counts / 2);
 306:Generated_Source\PSoC4/PM.c ****             #else
 307:Generated_Source\PSoC4/PM.c ****                 PM_offset[chNum] = 0;
 281              		.loc 1 307 0
 282 0122 254B     		ldr	r3, .L16+84
 283 0124 FA68     		ldr	r2, [r7, #12]
 284 0126 5200     		lsls	r2, r2, #1
 285 0128 0021     		movs	r1, #0
 286 012a D152     		strh	r1, [r2, r3]
 287              	.L14:
 308:Generated_Source\PSoC4/PM.c ****             #endif /* end PM_DEFAULT_DIFF_RESULT_FORMAT_SEL == PM__FUNSIGNED */
 309:Generated_Source\PSoC4/PM.c ****         }
 310:Generated_Source\PSoC4/PM.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:Generated_Source\PSoC4/PM.c ****         PM_countsPer10Volt[chNum] = (int16)(((counts * PM_10MV_COUNTS) +
 288              		.loc 1 311 0 discriminator 2
 289 012c BB68     		ldr	r3, [r7, #8]
 290 012e 234A     		ldr	r2, .L16+88
 291 0130 5343     		muls	r3, r2
 292 0132 234A     		ldr	r2, .L16+92
 293 0134 9446     		mov	ip, r2
 294 0136 6344     		add	r3, r3, ip
 312:Generated_Source\PSoC4/PM.c ****                             PM_DEFAULT_VREF_MV_VALUE) / (PM_DEFAULT_VREF_MV_VALUE * 2));
 295              		.loc 1 312 0 discriminator 2
 296 0138 2249     		ldr	r1, .L16+96
 297 013a 1800     		movs	r0, r3
 298 013c FFF7FEFF 		bl	__aeabi_idiv
 299 0140 0300     		movs	r3, r0
 311:Generated_Source\PSoC4/PM.c ****                             PM_DEFAULT_VREF_MV_VALUE) / (PM_DEFAULT_VREF_MV_VALUE * 2));
 300              		.loc 1 311 0 discriminator 2
 301 0142 1BB2     		sxth	r3, r3
 302 0144 1900     		movs	r1, r3
 303 0146 204B     		ldr	r3, .L16+100
 304 0148 FA68     		ldr	r2, [r7, #12]
 305 014a 9200     		lsls	r2, r2, #2
 306 014c D150     		str	r1, [r2, r3]
 232:Generated_Source\PSoC4/PM.c ****     {
 307              		.loc 1 232 0 discriminator 2
 308 014e FB68     		ldr	r3, [r7, #12]
 309 0150 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 12


 310 0152 FB60     		str	r3, [r7, #12]
 311              	.L8:
 232:Generated_Source\PSoC4/PM.c ****     {
 312              		.loc 1 232 0 is_stmt 0 discriminator 1
 313 0154 FB68     		ldr	r3, [r7, #12]
 314 0156 002B     		cmp	r3, #0
 315 0158 A2D0     		beq	.L15
 313:Generated_Source\PSoC4/PM.c ****     }
 314:Generated_Source\PSoC4/PM.c **** }
 316              		.loc 1 314 0 is_stmt 1
 317 015a C046     		nop
 318 015c BD46     		mov	sp, r7
 319 015e 04B0     		add	sp, sp, #16
 320              		@ sp needed
 321 0160 80BD     		pop	{r7, pc}
 322              	.L17:
 323 0162 C046     		.align	2
 324              	.L16:
 325 0164 00000000 		.word	PM_ISR
 326 0168 20003A40 		.word	1077542944
 327 016c 80033A40 		.word	1077543808
 328 0170 70021053 		.word	1393558128
 329 0174 70020053 		.word	1392509552
 330 0178 00003A40 		.word	1077542912
 331 017c 04003A40 		.word	1077542916
 332 0180 8C000080 		.word	-2147483508
 333 0184 18003A40 		.word	1077542936
 334 0188 0000FF07 		.word	134152192
 335 018c 1C003A40 		.word	1077542940
 336 0190 10003A40 		.word	1077542928
 337 0194 04000400 		.word	262148
 338 0198 14003A40 		.word	1077542932
 339 019c 00033A40 		.word	1077543680
 340 01a0 28023A40 		.word	1077543464
 341 01a4 38023A40 		.word	1077543480
 342 01a8 18023A40 		.word	1077543448
 343 01ac 30003A40 		.word	1077542960
 344 01b0 FFFFFFDF 		.word	-536870913
 345 01b4 80003A40 		.word	1077543040
 346 01b8 00000000 		.word	PM_offset
 347 01bc 10270000 		.word	10000
 348 01c0 E40C0000 		.word	3300
 349 01c4 C8190000 		.word	6600
 350 01c8 00000000 		.word	PM_countsPer10Volt
 351              		.cfi_endproc
 352              	.LFE3:
 353              		.size	PM_Init, .-PM_Init
 354              		.section	.text.PM_Enable,"ax",%progbits
 355              		.align	2
 356              		.global	PM_Enable
 357              		.code	16
 358              		.thumb_func
 359              		.type	PM_Enable, %function
 360              	PM_Enable:
 361              	.LFB4:
 315:Generated_Source\PSoC4/PM.c **** 
 316:Generated_Source\PSoC4/PM.c **** /*******************************************************************************
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 13


 317:Generated_Source\PSoC4/PM.c **** * Function Name: ADC_SAR_1_Enable
 318:Generated_Source\PSoC4/PM.c **** ********************************************************************************
 319:Generated_Source\PSoC4/PM.c **** *
 320:Generated_Source\PSoC4/PM.c **** * Summary:
 321:Generated_Source\PSoC4/PM.c **** *  Enables the clock and analog power for SAR ADC.
 322:Generated_Source\PSoC4/PM.c **** *
 323:Generated_Source\PSoC4/PM.c **** * Parameters:
 324:Generated_Source\PSoC4/PM.c **** *  None.
 325:Generated_Source\PSoC4/PM.c **** *
 326:Generated_Source\PSoC4/PM.c **** * Return:
 327:Generated_Source\PSoC4/PM.c **** *  None.
 328:Generated_Source\PSoC4/PM.c **** *
 329:Generated_Source\PSoC4/PM.c **** *******************************************************************************/
 330:Generated_Source\PSoC4/PM.c **** void PM_Enable(void)
 331:Generated_Source\PSoC4/PM.c **** {
 362              		.loc 1 331 0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
 365              		@ frame_needed = 1, uses_anonymous_args = 0
 366 0000 80B5     		push	{r7, lr}
 367              		.cfi_def_cfa_offset 8
 368              		.cfi_offset 7, -8
 369              		.cfi_offset 14, -4
 370 0002 00AF     		add	r7, sp, #0
 371              		.cfi_def_cfa_register 7
 332:Generated_Source\PSoC4/PM.c ****     if (0u == (PM_SAR_CTRL_REG & PM_ENABLE))
 372              		.loc 1 332 0
 373 0004 0A4B     		ldr	r3, .L22
 374 0006 1B68     		ldr	r3, [r3]
 375 0008 002B     		cmp	r3, #0
 376 000a 0EDB     		blt	.L21
 333:Generated_Source\PSoC4/PM.c ****     {
 334:Generated_Source\PSoC4/PM.c ****         #if(PM_CY_SAR_IP_VER != PM_CY_SAR_IP_VER0)
 335:Generated_Source\PSoC4/PM.c **** 
 336:Generated_Source\PSoC4/PM.c ****             while (0u != (PM_SAR_STATUS_REG & PM_STATUS_BUSY))
 377              		.loc 1 336 0
 378 000c C046     		nop
 379              	.L20:
 380              		.loc 1 336 0 is_stmt 0 discriminator 1
 381 000e 094B     		ldr	r3, .L22+4
 382 0010 1B68     		ldr	r3, [r3]
 383 0012 002B     		cmp	r3, #0
 384 0014 FBDB     		blt	.L20
 337:Generated_Source\PSoC4/PM.c ****             {
 338:Generated_Source\PSoC4/PM.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:Generated_Source\PSoC4/PM.c ****             }
 340:Generated_Source\PSoC4/PM.c ****         #endif /* (PM_CY_SAR_IP_VER != PM_CY_SAR_IP_VER0) */
 341:Generated_Source\PSoC4/PM.c ****         
 342:Generated_Source\PSoC4/PM.c ****         PM_SAR_CTRL_REG |= PM_ENABLE;
 385              		.loc 1 342 0 is_stmt 1
 386 0016 064B     		ldr	r3, .L22
 387 0018 054A     		ldr	r2, .L22
 388 001a 1268     		ldr	r2, [r2]
 389 001c 8021     		movs	r1, #128
 390 001e 0906     		lsls	r1, r1, #24
 391 0020 0A43     		orrs	r2, r1
 392 0022 1A60     		str	r2, [r3]
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 14


 343:Generated_Source\PSoC4/PM.c ****         
 344:Generated_Source\PSoC4/PM.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:Generated_Source\PSoC4/PM.c ****         CyDelayUs(PM_10US_DELAY);         
 393              		.loc 1 345 0
 394 0024 0A20     		movs	r0, #10
 395 0026 FFF7FEFF 		bl	CyDelayUs
 396              	.L21:
 346:Generated_Source\PSoC4/PM.c ****     }
 347:Generated_Source\PSoC4/PM.c **** }
 397              		.loc 1 347 0
 398 002a C046     		nop
 399 002c BD46     		mov	sp, r7
 400              		@ sp needed
 401 002e 80BD     		pop	{r7, pc}
 402              	.L23:
 403              		.align	2
 404              	.L22:
 405 0030 00003A40 		.word	1077542912
 406 0034 08023A40 		.word	1077543432
 407              		.cfi_endproc
 408              	.LFE4:
 409              		.size	PM_Enable, .-PM_Enable
 410              		.section	.text.PM_Stop,"ax",%progbits
 411              		.align	2
 412              		.global	PM_Stop
 413              		.code	16
 414              		.thumb_func
 415              		.type	PM_Stop, %function
 416              	PM_Stop:
 417              	.LFB5:
 348:Generated_Source\PSoC4/PM.c **** 
 349:Generated_Source\PSoC4/PM.c **** 
 350:Generated_Source\PSoC4/PM.c **** /*******************************************************************************
 351:Generated_Source\PSoC4/PM.c **** * Function Name: PM_Stop
 352:Generated_Source\PSoC4/PM.c **** ********************************************************************************
 353:Generated_Source\PSoC4/PM.c **** *
 354:Generated_Source\PSoC4/PM.c **** * Summary:
 355:Generated_Source\PSoC4/PM.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:Generated_Source\PSoC4/PM.c **** *  mode.
 357:Generated_Source\PSoC4/PM.c **** *
 358:Generated_Source\PSoC4/PM.c **** * Parameters:
 359:Generated_Source\PSoC4/PM.c **** *  None.
 360:Generated_Source\PSoC4/PM.c **** *
 361:Generated_Source\PSoC4/PM.c **** * Return:
 362:Generated_Source\PSoC4/PM.c **** *  None.
 363:Generated_Source\PSoC4/PM.c **** *
 364:Generated_Source\PSoC4/PM.c **** *******************************************************************************/
 365:Generated_Source\PSoC4/PM.c **** void PM_Stop(void)
 366:Generated_Source\PSoC4/PM.c **** {
 418              		.loc 1 366 0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 0
 421              		@ frame_needed = 1, uses_anonymous_args = 0
 422 0000 80B5     		push	{r7, lr}
 423              		.cfi_def_cfa_offset 8
 424              		.cfi_offset 7, -8
 425              		.cfi_offset 14, -4
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 15


 426 0002 00AF     		add	r7, sp, #0
 427              		.cfi_def_cfa_register 7
 367:Generated_Source\PSoC4/PM.c ****     PM_SAR_CTRL_REG &= (uint32)~PM_ENABLE;
 428              		.loc 1 367 0
 429 0004 044B     		ldr	r3, .L25
 430 0006 044A     		ldr	r2, .L25
 431 0008 1268     		ldr	r2, [r2]
 432 000a 5200     		lsls	r2, r2, #1
 433 000c 5208     		lsrs	r2, r2, #1
 434 000e 1A60     		str	r2, [r3]
 368:Generated_Source\PSoC4/PM.c **** }
 435              		.loc 1 368 0
 436 0010 C046     		nop
 437 0012 BD46     		mov	sp, r7
 438              		@ sp needed
 439 0014 80BD     		pop	{r7, pc}
 440              	.L26:
 441 0016 C046     		.align	2
 442              	.L25:
 443 0018 00003A40 		.word	1077542912
 444              		.cfi_endproc
 445              	.LFE5:
 446              		.size	PM_Stop, .-PM_Stop
 447              		.section	.text.PM_StartConvert,"ax",%progbits
 448              		.align	2
 449              		.global	PM_StartConvert
 450              		.code	16
 451              		.thumb_func
 452              		.type	PM_StartConvert, %function
 453              	PM_StartConvert:
 454              	.LFB6:
 369:Generated_Source\PSoC4/PM.c **** 
 370:Generated_Source\PSoC4/PM.c **** 
 371:Generated_Source\PSoC4/PM.c **** /*******************************************************************************
 372:Generated_Source\PSoC4/PM.c **** * Function Name: PM_StartConvert
 373:Generated_Source\PSoC4/PM.c **** ********************************************************************************
 374:Generated_Source\PSoC4/PM.c **** *
 375:Generated_Source\PSoC4/PM.c **** * Summary:
 376:Generated_Source\PSoC4/PM.c **** *  Description:
 377:Generated_Source\PSoC4/PM.c **** *  For free running mode, this API starts the conversion process and it
 378:Generated_Source\PSoC4/PM.c **** *  runs continuously.
 379:Generated_Source\PSoC4/PM.c **** *
 380:Generated_Source\PSoC4/PM.c **** *  In a triggered mode, this routine triggers every conversion by
 381:Generated_Source\PSoC4/PM.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:Generated_Source\PSoC4/PM.c **** *  every conversion has to start by this API.
 383:Generated_Source\PSoC4/PM.c **** *
 384:Generated_Source\PSoC4/PM.c **** * Parameters:
 385:Generated_Source\PSoC4/PM.c **** *  None.
 386:Generated_Source\PSoC4/PM.c **** *
 387:Generated_Source\PSoC4/PM.c **** * Return:
 388:Generated_Source\PSoC4/PM.c **** *  None.
 389:Generated_Source\PSoC4/PM.c **** *
 390:Generated_Source\PSoC4/PM.c **** *******************************************************************************/
 391:Generated_Source\PSoC4/PM.c **** void PM_StartConvert(void)
 392:Generated_Source\PSoC4/PM.c **** {
 455              		.loc 1 392 0
 456              		.cfi_startproc
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 16


 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 1, uses_anonymous_args = 0
 459 0000 80B5     		push	{r7, lr}
 460              		.cfi_def_cfa_offset 8
 461              		.cfi_offset 7, -8
 462              		.cfi_offset 14, -4
 463 0002 00AF     		add	r7, sp, #0
 464              		.cfi_def_cfa_register 7
 393:Generated_Source\PSoC4/PM.c ****     #if(PM_DEFAULT_SAMPLE_MODE_SEL == PM__FREERUNNING)
 394:Generated_Source\PSoC4/PM.c ****         PM_SAR_SAMPLE_CTRL_REG |= PM_CONTINUOUS_EN;
 465              		.loc 1 394 0
 466 0004 044B     		ldr	r3, .L28
 467 0006 044A     		ldr	r2, .L28
 468 0008 1268     		ldr	r2, [r2]
 469 000a 8021     		movs	r1, #128
 470 000c 4902     		lsls	r1, r1, #9
 471 000e 0A43     		orrs	r2, r1
 472 0010 1A60     		str	r2, [r3]
 395:Generated_Source\PSoC4/PM.c ****     #else /* Firmware trigger */
 396:Generated_Source\PSoC4/PM.c ****         PM_SAR_START_CTRL_REG = PM_FW_TRIGGER;
 397:Generated_Source\PSoC4/PM.c ****     #endif /* End PM_DEFAULT_SAMPLE_MODE == PM__FREERUNNING */
 398:Generated_Source\PSoC4/PM.c **** 
 399:Generated_Source\PSoC4/PM.c **** }
 473              		.loc 1 399 0
 474 0012 C046     		nop
 475 0014 BD46     		mov	sp, r7
 476              		@ sp needed
 477 0016 80BD     		pop	{r7, pc}
 478              	.L29:
 479              		.align	2
 480              	.L28:
 481 0018 04003A40 		.word	1077542916
 482              		.cfi_endproc
 483              	.LFE6:
 484              		.size	PM_StartConvert, .-PM_StartConvert
 485              		.section	.text.PM_StopConvert,"ax",%progbits
 486              		.align	2
 487              		.global	PM_StopConvert
 488              		.code	16
 489              		.thumb_func
 490              		.type	PM_StopConvert, %function
 491              	PM_StopConvert:
 492              	.LFB7:
 400:Generated_Source\PSoC4/PM.c **** 
 401:Generated_Source\PSoC4/PM.c **** 
 402:Generated_Source\PSoC4/PM.c **** /*******************************************************************************
 403:Generated_Source\PSoC4/PM.c **** * Function Name: PM_StopConvert
 404:Generated_Source\PSoC4/PM.c **** ********************************************************************************
 405:Generated_Source\PSoC4/PM.c **** *
 406:Generated_Source\PSoC4/PM.c **** * Summary:
 407:Generated_Source\PSoC4/PM.c **** *  Forces the ADC to stop all conversions.
 408:Generated_Source\PSoC4/PM.c **** *
 409:Generated_Source\PSoC4/PM.c **** * Parameters:
 410:Generated_Source\PSoC4/PM.c **** *  None.
 411:Generated_Source\PSoC4/PM.c **** *
 412:Generated_Source\PSoC4/PM.c **** * Return:
 413:Generated_Source\PSoC4/PM.c **** *  None.
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 17


 414:Generated_Source\PSoC4/PM.c **** *
 415:Generated_Source\PSoC4/PM.c **** *******************************************************************************/
 416:Generated_Source\PSoC4/PM.c **** void PM_StopConvert(void)
 417:Generated_Source\PSoC4/PM.c **** {
 493              		.loc 1 417 0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 1, uses_anonymous_args = 0
 497 0000 80B5     		push	{r7, lr}
 498              		.cfi_def_cfa_offset 8
 499              		.cfi_offset 7, -8
 500              		.cfi_offset 14, -4
 501 0002 00AF     		add	r7, sp, #0
 502              		.cfi_def_cfa_register 7
 418:Generated_Source\PSoC4/PM.c ****     #if(PM_DEFAULT_SAMPLE_MODE_SEL == PM__FREERUNNING)
 419:Generated_Source\PSoC4/PM.c ****         PM_SAR_SAMPLE_CTRL_REG &= (uint32)(~PM_CONTINUOUS_EN);
 503              		.loc 1 419 0
 504 0004 044B     		ldr	r3, .L31
 505 0006 044A     		ldr	r2, .L31
 506 0008 1268     		ldr	r2, [r2]
 507 000a 0449     		ldr	r1, .L31+4
 508 000c 0A40     		ands	r2, r1
 509 000e 1A60     		str	r2, [r3]
 420:Generated_Source\PSoC4/PM.c ****     #endif /* PM_DEFAULT_SAMPLE_MODE == PM__FREERUNNING */
 421:Generated_Source\PSoC4/PM.c **** }
 510              		.loc 1 421 0
 511 0010 C046     		nop
 512 0012 BD46     		mov	sp, r7
 513              		@ sp needed
 514 0014 80BD     		pop	{r7, pc}
 515              	.L32:
 516 0016 C046     		.align	2
 517              	.L31:
 518 0018 04003A40 		.word	1077542916
 519 001c FFFFFEFF 		.word	-65537
 520              		.cfi_endproc
 521              	.LFE7:
 522              		.size	PM_StopConvert, .-PM_StopConvert
 523              		.section	.text.PM_IsEndConversion,"ax",%progbits
 524              		.align	2
 525              		.global	PM_IsEndConversion
 526              		.code	16
 527              		.thumb_func
 528              		.type	PM_IsEndConversion, %function
 529              	PM_IsEndConversion:
 530              	.LFB8:
 422:Generated_Source\PSoC4/PM.c **** 
 423:Generated_Source\PSoC4/PM.c **** 
 424:Generated_Source\PSoC4/PM.c **** /*******************************************************************************
 425:Generated_Source\PSoC4/PM.c **** * Function Name: PM_IsEndConversion
 426:Generated_Source\PSoC4/PM.c **** ********************************************************************************
 427:Generated_Source\PSoC4/PM.c **** *
 428:Generated_Source\PSoC4/PM.c **** * Summary:
 429:Generated_Source\PSoC4/PM.c **** *  Description: Checks for ADC end of conversion for the case one
 430:Generated_Source\PSoC4/PM.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:Generated_Source\PSoC4/PM.c **** *  as a software version of the EOC. This function provides the
 432:Generated_Source\PSoC4/PM.c **** *  programmer with two options. In one mode this function
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 18


 433:Generated_Source\PSoC4/PM.c **** *  immediately returns with the conversion status. In the other mode,
 434:Generated_Source\PSoC4/PM.c **** *  the function does not return (blocking) until the conversion has
 435:Generated_Source\PSoC4/PM.c **** *  completed.
 436:Generated_Source\PSoC4/PM.c **** *
 437:Generated_Source\PSoC4/PM.c **** * Parameters:
 438:Generated_Source\PSoC4/PM.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:Generated_Source\PSoC4/PM.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:Generated_Source\PSoC4/PM.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:Generated_Source\PSoC4/PM.c **** *                              for injection channel
 442:Generated_Source\PSoC4/PM.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:Generated_Source\PSoC4/PM.c **** *                              channel conversion
 444:Generated_Source\PSoC4/PM.c **** *
 445:Generated_Source\PSoC4/PM.c **** * Return:
 446:Generated_Source\PSoC4/PM.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:Generated_Source\PSoC4/PM.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:Generated_Source\PSoC4/PM.c **** *
 449:Generated_Source\PSoC4/PM.c **** *******************************************************************************/
 450:Generated_Source\PSoC4/PM.c **** uint32 PM_IsEndConversion(uint32 retMode)
 451:Generated_Source\PSoC4/PM.c **** {
 531              		.loc 1 451 0
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 16
 534              		@ frame_needed = 1, uses_anonymous_args = 0
 535 0000 80B5     		push	{r7, lr}
 536              		.cfi_def_cfa_offset 8
 537              		.cfi_offset 7, -8
 538              		.cfi_offset 14, -4
 539 0002 84B0     		sub	sp, sp, #16
 540              		.cfi_def_cfa_offset 24
 541 0004 00AF     		add	r7, sp, #0
 542              		.cfi_def_cfa_register 7
 543 0006 7860     		str	r0, [r7, #4]
 452:Generated_Source\PSoC4/PM.c ****     uint32 status = 0u;
 544              		.loc 1 452 0
 545 0008 0023     		movs	r3, #0
 546 000a FB60     		str	r3, [r7, #12]
 453:Generated_Source\PSoC4/PM.c **** 
 454:Generated_Source\PSoC4/PM.c ****     if((retMode & (PM_RETURN_STATUS | PM_WAIT_FOR_RESULT)) != 0u)
 547              		.loc 1 454 0
 548 000c 7B68     		ldr	r3, [r7, #4]
 549 000e 0322     		movs	r2, #3
 550 0010 1340     		ands	r3, r2
 551 0012 11D0     		beq	.L34
 552              	.L36:
 455:Generated_Source\PSoC4/PM.c ****     {
 456:Generated_Source\PSoC4/PM.c ****         do
 457:Generated_Source\PSoC4/PM.c ****         {
 458:Generated_Source\PSoC4/PM.c ****             status = PM_SAR_INTR_REG & PM_EOS_MASK;
 553              		.loc 1 458 0 discriminator 2
 554 0014 0B4B     		ldr	r3, .L38
 555 0016 1B68     		ldr	r3, [r3]
 556 0018 0122     		movs	r2, #1
 557 001a 1340     		ands	r3, r2
 558 001c FB60     		str	r3, [r7, #12]
 459:Generated_Source\PSoC4/PM.c ****         }while((status == 0u) && ((retMode & PM_WAIT_FOR_RESULT) != 0u));
 559              		.loc 1 459 0 discriminator 2
 560 001e FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 19


 561 0020 002B     		cmp	r3, #0
 562 0022 03D1     		bne	.L35
 563              		.loc 1 459 0 is_stmt 0 discriminator 1
 564 0024 7B68     		ldr	r3, [r7, #4]
 565 0026 0222     		movs	r2, #2
 566 0028 1340     		ands	r3, r2
 567 002a F3D1     		bne	.L36
 568              	.L35:
 460:Generated_Source\PSoC4/PM.c **** 
 461:Generated_Source\PSoC4/PM.c ****         if(status != 0u)
 569              		.loc 1 461 0 is_stmt 1
 570 002c FB68     		ldr	r3, [r7, #12]
 571 002e 002B     		cmp	r3, #0
 572 0030 02D0     		beq	.L34
 462:Generated_Source\PSoC4/PM.c ****         {
 463:Generated_Source\PSoC4/PM.c ****             /* Clear EOS bit */
 464:Generated_Source\PSoC4/PM.c ****             PM_SAR_INTR_REG = PM_EOS_MASK;
 573              		.loc 1 464 0
 574 0032 044B     		ldr	r3, .L38
 575 0034 0122     		movs	r2, #1
 576 0036 1A60     		str	r2, [r3]
 577              	.L34:
 465:Generated_Source\PSoC4/PM.c ****         }
 466:Generated_Source\PSoC4/PM.c ****     }
 467:Generated_Source\PSoC4/PM.c **** 
 468:Generated_Source\PSoC4/PM.c ****     #if(PM_INJ_CHANNEL_ENABLED)
 469:Generated_Source\PSoC4/PM.c ****         if((retMode & (PM_RETURN_STATUS_INJ | PM_WAIT_FOR_RESULT_INJ)) != 0u)
 470:Generated_Source\PSoC4/PM.c ****         {
 471:Generated_Source\PSoC4/PM.c ****             do
 472:Generated_Source\PSoC4/PM.c ****             {
 473:Generated_Source\PSoC4/PM.c ****                 status |= PM_SAR_INTR_REG & PM_INJ_EOC_MASK;
 474:Generated_Source\PSoC4/PM.c ****             }while(((status & PM_INJ_EOC_MASK) == 0u) &&
 475:Generated_Source\PSoC4/PM.c ****                    ((retMode & PM_WAIT_FOR_RESULT_INJ) != 0u));
 476:Generated_Source\PSoC4/PM.c **** 
 477:Generated_Source\PSoC4/PM.c ****             if((status & PM_INJ_EOC_MASK) != 0u)
 478:Generated_Source\PSoC4/PM.c ****             {
 479:Generated_Source\PSoC4/PM.c ****                 /* Clear Injection EOS bit */
 480:Generated_Source\PSoC4/PM.c ****                 PM_SAR_INTR_REG = PM_INJ_EOC_MASK;
 481:Generated_Source\PSoC4/PM.c ****             }
 482:Generated_Source\PSoC4/PM.c ****         }
 483:Generated_Source\PSoC4/PM.c ****     #endif /* PM_INJ_CHANNEL_ENABLED */
 484:Generated_Source\PSoC4/PM.c **** 
 485:Generated_Source\PSoC4/PM.c ****     return (status);
 578              		.loc 1 485 0
 579 0038 FB68     		ldr	r3, [r7, #12]
 486:Generated_Source\PSoC4/PM.c **** }
 580              		.loc 1 486 0
 581 003a 1800     		movs	r0, r3
 582 003c BD46     		mov	sp, r7
 583 003e 04B0     		add	sp, sp, #16
 584              		@ sp needed
 585 0040 80BD     		pop	{r7, pc}
 586              	.L39:
 587 0042 C046     		.align	2
 588              	.L38:
 589 0044 10023A40 		.word	1077543440
 590              		.cfi_endproc
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 20


 591              	.LFE8:
 592              		.size	PM_IsEndConversion, .-PM_IsEndConversion
 593              		.section	.text.PM_GetResult16,"ax",%progbits
 594              		.align	2
 595              		.global	PM_GetResult16
 596              		.code	16
 597              		.thumb_func
 598              		.type	PM_GetResult16, %function
 599              	PM_GetResult16:
 600              	.LFB9:
 487:Generated_Source\PSoC4/PM.c **** 
 488:Generated_Source\PSoC4/PM.c **** 
 489:Generated_Source\PSoC4/PM.c **** /*******************************************************************************
 490:Generated_Source\PSoC4/PM.c **** * Function Name: PM_GetResult16
 491:Generated_Source\PSoC4/PM.c **** ********************************************************************************
 492:Generated_Source\PSoC4/PM.c **** *
 493:Generated_Source\PSoC4/PM.c **** * Summary:
 494:Generated_Source\PSoC4/PM.c **** *  Gets the data available in the SAR DATA register.
 495:Generated_Source\PSoC4/PM.c **** *
 496:Generated_Source\PSoC4/PM.c **** * Parameters:
 497:Generated_Source\PSoC4/PM.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:Generated_Source\PSoC4/PM.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:Generated_Source\PSoC4/PM.c **** *
 500:Generated_Source\PSoC4/PM.c **** * Return:
 501:Generated_Source\PSoC4/PM.c **** *  Returns converted data as a signed 16-bit integer
 502:Generated_Source\PSoC4/PM.c **** *
 503:Generated_Source\PSoC4/PM.c **** *******************************************************************************/
 504:Generated_Source\PSoC4/PM.c **** int16 PM_GetResult16(uint32 chan)
 505:Generated_Source\PSoC4/PM.c **** {
 601              		.loc 1 505 0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 16
 604              		@ frame_needed = 1, uses_anonymous_args = 0
 605 0000 80B5     		push	{r7, lr}
 606              		.cfi_def_cfa_offset 8
 607              		.cfi_offset 7, -8
 608              		.cfi_offset 14, -4
 609 0002 84B0     		sub	sp, sp, #16
 610              		.cfi_def_cfa_offset 24
 611 0004 00AF     		add	r7, sp, #0
 612              		.cfi_def_cfa_register 7
 613 0006 7860     		str	r0, [r7, #4]
 506:Generated_Source\PSoC4/PM.c ****     uint32 result;
 507:Generated_Source\PSoC4/PM.c **** 
 508:Generated_Source\PSoC4/PM.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:Generated_Source\PSoC4/PM.c ****     CYASSERT(chan < PM_TOTAL_CHANNELS_NUM);
 614              		.loc 1 509 0
 615 0008 7B68     		ldr	r3, [r7, #4]
 616 000a 002B     		cmp	r3, #0
 617 000c 02D0     		beq	.L41
 618              		.loc 1 509 0 is_stmt 0 discriminator 1
 619 000e 0020     		movs	r0, #0
 620 0010 FFF7FEFF 		bl	CyHalt
 621              	.L41:
 510:Generated_Source\PSoC4/PM.c **** 
 511:Generated_Source\PSoC4/PM.c ****     if(chan < PM_SEQUENCED_CHANNELS_NUM)
 622              		.loc 1 511 0 is_stmt 1
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 21


 623 0014 7B68     		ldr	r3, [r7, #4]
 624 0016 002B     		cmp	r3, #0
 625 0018 09D1     		bne	.L42
 512:Generated_Source\PSoC4/PM.c ****     {
 513:Generated_Source\PSoC4/PM.c ****         result = CY_GET_REG32((reg32 *)(PM_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 626              		.loc 1 513 0
 627 001a 7B68     		ldr	r3, [r7, #4]
 628 001c 9B00     		lsls	r3, r3, #2
 629 001e 084A     		ldr	r2, .L45
 630 0020 9446     		mov	ip, r2
 631 0022 6344     		add	r3, r3, ip
 632 0024 1B68     		ldr	r3, [r3]
 633 0026 1B04     		lsls	r3, r3, #16
 634 0028 1B0C     		lsrs	r3, r3, #16
 635 002a FB60     		str	r3, [r7, #12]
 636 002c 01E0     		b	.L43
 637              	.L42:
 514:Generated_Source\PSoC4/PM.c ****                 PM_RESULT_MASK;
 515:Generated_Source\PSoC4/PM.c ****     }
 516:Generated_Source\PSoC4/PM.c ****     else
 517:Generated_Source\PSoC4/PM.c ****     {
 518:Generated_Source\PSoC4/PM.c ****         #if(PM_INJ_CHANNEL_ENABLED)
 519:Generated_Source\PSoC4/PM.c ****             result = PM_SAR_INJ_RESULT_REG & PM_RESULT_MASK;
 520:Generated_Source\PSoC4/PM.c ****         #else
 521:Generated_Source\PSoC4/PM.c ****             result = 0u;
 638              		.loc 1 521 0
 639 002e 0023     		movs	r3, #0
 640 0030 FB60     		str	r3, [r7, #12]
 641              	.L43:
 522:Generated_Source\PSoC4/PM.c ****         #endif /* PM_INJ_CHANNEL_ENABLED */
 523:Generated_Source\PSoC4/PM.c ****     }
 524:Generated_Source\PSoC4/PM.c **** 
 525:Generated_Source\PSoC4/PM.c ****     return ( (int16)result );
 642              		.loc 1 525 0
 643 0032 FB68     		ldr	r3, [r7, #12]
 644 0034 1BB2     		sxth	r3, r3
 526:Generated_Source\PSoC4/PM.c **** }
 645              		.loc 1 526 0
 646 0036 1800     		movs	r0, r3
 647 0038 BD46     		mov	sp, r7
 648 003a 04B0     		add	sp, sp, #16
 649              		@ sp needed
 650 003c 80BD     		pop	{r7, pc}
 651              	.L46:
 652 003e C046     		.align	2
 653              	.L45:
 654 0040 80013A40 		.word	1077543296
 655              		.cfi_endproc
 656              	.LFE9:
 657              		.size	PM_GetResult16, .-PM_GetResult16
 658              		.section	.text.PM_SetChanMask,"ax",%progbits
 659              		.align	2
 660              		.global	PM_SetChanMask
 661              		.code	16
 662              		.thumb_func
 663              		.type	PM_SetChanMask, %function
 664              	PM_SetChanMask:
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 22


 665              	.LFB10:
 527:Generated_Source\PSoC4/PM.c **** 
 528:Generated_Source\PSoC4/PM.c **** 
 529:Generated_Source\PSoC4/PM.c **** /*******************************************************************************
 530:Generated_Source\PSoC4/PM.c **** * Function Name: PM_SetChanMask
 531:Generated_Source\PSoC4/PM.c **** ********************************************************************************
 532:Generated_Source\PSoC4/PM.c **** *
 533:Generated_Source\PSoC4/PM.c **** * Summary:
 534:Generated_Source\PSoC4/PM.c **** *  Sets the channel enable mask.
 535:Generated_Source\PSoC4/PM.c **** *
 536:Generated_Source\PSoC4/PM.c **** * Parameters:
 537:Generated_Source\PSoC4/PM.c **** *  mask: Sets which channels that will be
 538:Generated_Source\PSoC4/PM.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:Generated_Source\PSoC4/PM.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:Generated_Source\PSoC4/PM.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:Generated_Source\PSoC4/PM.c **** *  This API will not enable the injection channel.
 542:Generated_Source\PSoC4/PM.c **** *  Examples: If the component is setup to sequence through 8
 543:Generated_Source\PSoC4/PM.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:Generated_Source\PSoC4/PM.c **** *
 545:Generated_Source\PSoC4/PM.c **** * Return:
 546:Generated_Source\PSoC4/PM.c **** *  None.
 547:Generated_Source\PSoC4/PM.c **** *
 548:Generated_Source\PSoC4/PM.c **** *******************************************************************************/
 549:Generated_Source\PSoC4/PM.c **** void PM_SetChanMask(uint32 mask)
 550:Generated_Source\PSoC4/PM.c **** {
 666              		.loc 1 550 0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 8
 669              		@ frame_needed = 1, uses_anonymous_args = 0
 670 0000 80B5     		push	{r7, lr}
 671              		.cfi_def_cfa_offset 8
 672              		.cfi_offset 7, -8
 673              		.cfi_offset 14, -4
 674 0002 82B0     		sub	sp, sp, #8
 675              		.cfi_def_cfa_offset 16
 676 0004 00AF     		add	r7, sp, #0
 677              		.cfi_def_cfa_register 7
 678 0006 7860     		str	r0, [r7, #4]
 551:Generated_Source\PSoC4/PM.c ****     PM_SAR_CHAN_EN_REG = mask & PM_MAX_CHANNELS_EN_MASK;
 679              		.loc 1 551 0
 680 0008 044B     		ldr	r3, .L48
 681 000a 7A68     		ldr	r2, [r7, #4]
 682 000c 0121     		movs	r1, #1
 683 000e 0A40     		ands	r2, r1
 684 0010 1A60     		str	r2, [r3]
 552:Generated_Source\PSoC4/PM.c **** }
 685              		.loc 1 552 0
 686 0012 C046     		nop
 687 0014 BD46     		mov	sp, r7
 688 0016 02B0     		add	sp, sp, #8
 689              		@ sp needed
 690 0018 80BD     		pop	{r7, pc}
 691              	.L49:
 692 001a C046     		.align	2
 693              	.L48:
 694 001c 20003A40 		.word	1077542944
 695              		.cfi_endproc
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 23


 696              	.LFE10:
 697              		.size	PM_SetChanMask, .-PM_SetChanMask
 698              		.section	.text.PM_SetLowLimit,"ax",%progbits
 699              		.align	2
 700              		.global	PM_SetLowLimit
 701              		.code	16
 702              		.thumb_func
 703              		.type	PM_SetLowLimit, %function
 704              	PM_SetLowLimit:
 705              	.LFB11:
 553:Generated_Source\PSoC4/PM.c **** 
 554:Generated_Source\PSoC4/PM.c **** #if(PM_INJ_CHANNEL_ENABLED)
 555:Generated_Source\PSoC4/PM.c **** 
 556:Generated_Source\PSoC4/PM.c **** 
 557:Generated_Source\PSoC4/PM.c ****     /*******************************************************************************
 558:Generated_Source\PSoC4/PM.c ****     * Function Name: PM_EnableInjection
 559:Generated_Source\PSoC4/PM.c ****     ********************************************************************************
 560:Generated_Source\PSoC4/PM.c ****     *
 561:Generated_Source\PSoC4/PM.c ****     * Summary:
 562:Generated_Source\PSoC4/PM.c ****     *  Enables the injection channel for the next scan only.
 563:Generated_Source\PSoC4/PM.c ****     *
 564:Generated_Source\PSoC4/PM.c ****     * Parameters:
 565:Generated_Source\PSoC4/PM.c ****     *  None.
 566:Generated_Source\PSoC4/PM.c ****     *
 567:Generated_Source\PSoC4/PM.c ****     * Return:
 568:Generated_Source\PSoC4/PM.c ****     *  None.
 569:Generated_Source\PSoC4/PM.c ****     *
 570:Generated_Source\PSoC4/PM.c ****     *******************************************************************************/
 571:Generated_Source\PSoC4/PM.c ****     void PM_EnableInjection(void)
 572:Generated_Source\PSoC4/PM.c ****     {
 573:Generated_Source\PSoC4/PM.c ****         PM_SAR_INJ_CHAN_CONFIG_REG |= PM_INJ_CHAN_EN;
 574:Generated_Source\PSoC4/PM.c ****     }
 575:Generated_Source\PSoC4/PM.c **** 
 576:Generated_Source\PSoC4/PM.c **** #endif /* PM_INJ_CHANNEL_ENABLED */
 577:Generated_Source\PSoC4/PM.c **** 
 578:Generated_Source\PSoC4/PM.c **** 
 579:Generated_Source\PSoC4/PM.c **** /*******************************************************************************
 580:Generated_Source\PSoC4/PM.c **** * Function Name: PM_SetLowLimit
 581:Generated_Source\PSoC4/PM.c **** ********************************************************************************
 582:Generated_Source\PSoC4/PM.c **** *
 583:Generated_Source\PSoC4/PM.c **** * Summary:
 584:Generated_Source\PSoC4/PM.c **** *  Sets the low limit parameter for a limit condition.
 585:Generated_Source\PSoC4/PM.c **** *
 586:Generated_Source\PSoC4/PM.c **** * Parameters:
 587:Generated_Source\PSoC4/PM.c **** *  lowLimit: The low limit for a limit condition.
 588:Generated_Source\PSoC4/PM.c **** *
 589:Generated_Source\PSoC4/PM.c **** * Return:
 590:Generated_Source\PSoC4/PM.c **** *  None.
 591:Generated_Source\PSoC4/PM.c **** *
 592:Generated_Source\PSoC4/PM.c **** *******************************************************************************/
 593:Generated_Source\PSoC4/PM.c **** void PM_SetLowLimit(uint32 lowLimit)
 594:Generated_Source\PSoC4/PM.c **** {
 706              		.loc 1 594 0
 707              		.cfi_startproc
 708              		@ args = 0, pretend = 0, frame = 8
 709              		@ frame_needed = 1, uses_anonymous_args = 0
 710 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 24


 711              		.cfi_def_cfa_offset 8
 712              		.cfi_offset 7, -8
 713              		.cfi_offset 14, -4
 714 0002 82B0     		sub	sp, sp, #8
 715              		.cfi_def_cfa_offset 16
 716 0004 00AF     		add	r7, sp, #0
 717              		.cfi_def_cfa_register 7
 718 0006 7860     		str	r0, [r7, #4]
 595:Generated_Source\PSoC4/PM.c ****     PM_SAR_RANGE_THRES_REG &= (uint32)(~PM_RANGE_LOW_MASK);
 719              		.loc 1 595 0
 720 0008 084B     		ldr	r3, .L51
 721 000a 084A     		ldr	r2, .L51
 722 000c 1268     		ldr	r2, [r2]
 723 000e 120C     		lsrs	r2, r2, #16
 724 0010 1204     		lsls	r2, r2, #16
 725 0012 1A60     		str	r2, [r3]
 596:Generated_Source\PSoC4/PM.c ****     PM_SAR_RANGE_THRES_REG |= lowLimit & PM_RANGE_LOW_MASK;
 726              		.loc 1 596 0
 727 0014 054B     		ldr	r3, .L51
 728 0016 054A     		ldr	r2, .L51
 729 0018 1168     		ldr	r1, [r2]
 730 001a 7A68     		ldr	r2, [r7, #4]
 731 001c 1204     		lsls	r2, r2, #16
 732 001e 120C     		lsrs	r2, r2, #16
 733 0020 0A43     		orrs	r2, r1
 734 0022 1A60     		str	r2, [r3]
 597:Generated_Source\PSoC4/PM.c **** }
 735              		.loc 1 597 0
 736 0024 C046     		nop
 737 0026 BD46     		mov	sp, r7
 738 0028 02B0     		add	sp, sp, #8
 739              		@ sp needed
 740 002a 80BD     		pop	{r7, pc}
 741              	.L52:
 742              		.align	2
 743              	.L51:
 744 002c 18003A40 		.word	1077542936
 745              		.cfi_endproc
 746              	.LFE11:
 747              		.size	PM_SetLowLimit, .-PM_SetLowLimit
 748              		.section	.text.PM_SetHighLimit,"ax",%progbits
 749              		.align	2
 750              		.global	PM_SetHighLimit
 751              		.code	16
 752              		.thumb_func
 753              		.type	PM_SetHighLimit, %function
 754              	PM_SetHighLimit:
 755              	.LFB12:
 598:Generated_Source\PSoC4/PM.c **** 
 599:Generated_Source\PSoC4/PM.c **** 
 600:Generated_Source\PSoC4/PM.c **** /*******************************************************************************
 601:Generated_Source\PSoC4/PM.c **** * Function Name: PM_SetHighLimit
 602:Generated_Source\PSoC4/PM.c **** ********************************************************************************
 603:Generated_Source\PSoC4/PM.c **** *
 604:Generated_Source\PSoC4/PM.c **** * Summary:
 605:Generated_Source\PSoC4/PM.c **** *  Sets the low limit parameter for a limit condition.
 606:Generated_Source\PSoC4/PM.c **** *
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 25


 607:Generated_Source\PSoC4/PM.c **** * Parameters:
 608:Generated_Source\PSoC4/PM.c **** *  highLimit: The high limit for a limit condition.
 609:Generated_Source\PSoC4/PM.c **** *
 610:Generated_Source\PSoC4/PM.c **** * Return:
 611:Generated_Source\PSoC4/PM.c **** *  None.
 612:Generated_Source\PSoC4/PM.c **** *
 613:Generated_Source\PSoC4/PM.c **** *******************************************************************************/
 614:Generated_Source\PSoC4/PM.c **** void PM_SetHighLimit(uint32 highLimit)
 615:Generated_Source\PSoC4/PM.c **** {
 756              		.loc 1 615 0
 757              		.cfi_startproc
 758              		@ args = 0, pretend = 0, frame = 8
 759              		@ frame_needed = 1, uses_anonymous_args = 0
 760 0000 80B5     		push	{r7, lr}
 761              		.cfi_def_cfa_offset 8
 762              		.cfi_offset 7, -8
 763              		.cfi_offset 14, -4
 764 0002 82B0     		sub	sp, sp, #8
 765              		.cfi_def_cfa_offset 16
 766 0004 00AF     		add	r7, sp, #0
 767              		.cfi_def_cfa_register 7
 768 0006 7860     		str	r0, [r7, #4]
 616:Generated_Source\PSoC4/PM.c ****     PM_SAR_RANGE_THRES_REG &= (uint32)(~PM_RANGE_HIGH_MASK);
 769              		.loc 1 616 0
 770 0008 084B     		ldr	r3, .L54
 771 000a 084A     		ldr	r2, .L54
 772 000c 1268     		ldr	r2, [r2]
 773 000e 1204     		lsls	r2, r2, #16
 774 0010 120C     		lsrs	r2, r2, #16
 775 0012 1A60     		str	r2, [r3]
 617:Generated_Source\PSoC4/PM.c ****     PM_SAR_RANGE_THRES_REG |= (uint32)(highLimit << PM_RANGE_HIGH_OFFSET);
 776              		.loc 1 617 0
 777 0014 054B     		ldr	r3, .L54
 778 0016 054A     		ldr	r2, .L54
 779 0018 1168     		ldr	r1, [r2]
 780 001a 7A68     		ldr	r2, [r7, #4]
 781 001c 1204     		lsls	r2, r2, #16
 782 001e 0A43     		orrs	r2, r1
 783 0020 1A60     		str	r2, [r3]
 618:Generated_Source\PSoC4/PM.c **** }
 784              		.loc 1 618 0
 785 0022 C046     		nop
 786 0024 BD46     		mov	sp, r7
 787 0026 02B0     		add	sp, sp, #8
 788              		@ sp needed
 789 0028 80BD     		pop	{r7, pc}
 790              	.L55:
 791 002a C046     		.align	2
 792              	.L54:
 793 002c 18003A40 		.word	1077542936
 794              		.cfi_endproc
 795              	.LFE12:
 796              		.size	PM_SetHighLimit, .-PM_SetHighLimit
 797              		.section	.text.PM_SetLimitMask,"ax",%progbits
 798              		.align	2
 799              		.global	PM_SetLimitMask
 800              		.code	16
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 26


 801              		.thumb_func
 802              		.type	PM_SetLimitMask, %function
 803              	PM_SetLimitMask:
 804              	.LFB13:
 619:Generated_Source\PSoC4/PM.c **** 
 620:Generated_Source\PSoC4/PM.c **** 
 621:Generated_Source\PSoC4/PM.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/PM.c **** * Function Name: PM_SetLimitMask
 623:Generated_Source\PSoC4/PM.c **** ********************************************************************************
 624:Generated_Source\PSoC4/PM.c **** *
 625:Generated_Source\PSoC4/PM.c **** * Summary:
 626:Generated_Source\PSoC4/PM.c **** *  Sets the channel limit condition mask.
 627:Generated_Source\PSoC4/PM.c **** *
 628:Generated_Source\PSoC4/PM.c **** * Parameters:
 629:Generated_Source\PSoC4/PM.c **** *  mask: Sets which channels that may cause a
 630:Generated_Source\PSoC4/PM.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:Generated_Source\PSoC4/PM.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:Generated_Source\PSoC4/PM.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:Generated_Source\PSoC4/PM.c **** *
 634:Generated_Source\PSoC4/PM.c **** * Return:
 635:Generated_Source\PSoC4/PM.c **** *  None.
 636:Generated_Source\PSoC4/PM.c **** *
 637:Generated_Source\PSoC4/PM.c **** *******************************************************************************/
 638:Generated_Source\PSoC4/PM.c **** void PM_SetLimitMask(uint32 mask)
 639:Generated_Source\PSoC4/PM.c **** {
 805              		.loc 1 639 0
 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 8
 808              		@ frame_needed = 1, uses_anonymous_args = 0
 809 0000 80B5     		push	{r7, lr}
 810              		.cfi_def_cfa_offset 8
 811              		.cfi_offset 7, -8
 812              		.cfi_offset 14, -4
 813 0002 82B0     		sub	sp, sp, #8
 814              		.cfi_def_cfa_offset 16
 815 0004 00AF     		add	r7, sp, #0
 816              		.cfi_def_cfa_register 7
 817 0006 7860     		str	r0, [r7, #4]
 640:Generated_Source\PSoC4/PM.c ****     PM_SAR_RANGE_INTR_MASK_REG = mask & PM_MAX_CHANNELS_EN_MASK;
 818              		.loc 1 640 0
 819 0008 044B     		ldr	r3, .L57
 820 000a 7A68     		ldr	r2, [r7, #4]
 821 000c 0121     		movs	r1, #1
 822 000e 0A40     		ands	r2, r1
 823 0010 1A60     		str	r2, [r3]
 641:Generated_Source\PSoC4/PM.c **** }
 824              		.loc 1 641 0
 825 0012 C046     		nop
 826 0014 BD46     		mov	sp, r7
 827 0016 02B0     		add	sp, sp, #8
 828              		@ sp needed
 829 0018 80BD     		pop	{r7, pc}
 830              	.L58:
 831 001a C046     		.align	2
 832              	.L57:
 833 001c 38023A40 		.word	1077543480
 834              		.cfi_endproc
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 27


 835              	.LFE13:
 836              		.size	PM_SetLimitMask, .-PM_SetLimitMask
 837              		.section	.text.PM_SetSatMask,"ax",%progbits
 838              		.align	2
 839              		.global	PM_SetSatMask
 840              		.code	16
 841              		.thumb_func
 842              		.type	PM_SetSatMask, %function
 843              	PM_SetSatMask:
 844              	.LFB14:
 642:Generated_Source\PSoC4/PM.c **** 
 643:Generated_Source\PSoC4/PM.c **** 
 644:Generated_Source\PSoC4/PM.c **** /*******************************************************************************
 645:Generated_Source\PSoC4/PM.c **** * Function Name: PM_SetSatMask
 646:Generated_Source\PSoC4/PM.c **** ********************************************************************************
 647:Generated_Source\PSoC4/PM.c **** *
 648:Generated_Source\PSoC4/PM.c **** * Summary:
 649:Generated_Source\PSoC4/PM.c **** *  Sets the channel saturation event mask.
 650:Generated_Source\PSoC4/PM.c **** *
 651:Generated_Source\PSoC4/PM.c **** * Parameters:
 652:Generated_Source\PSoC4/PM.c **** *  mask: Sets which channels that may cause a
 653:Generated_Source\PSoC4/PM.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:Generated_Source\PSoC4/PM.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:Generated_Source\PSoC4/PM.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:Generated_Source\PSoC4/PM.c **** *
 657:Generated_Source\PSoC4/PM.c **** * Return:
 658:Generated_Source\PSoC4/PM.c **** *  None.
 659:Generated_Source\PSoC4/PM.c **** *
 660:Generated_Source\PSoC4/PM.c **** *******************************************************************************/
 661:Generated_Source\PSoC4/PM.c **** void PM_SetSatMask(uint32 mask)
 662:Generated_Source\PSoC4/PM.c **** {
 845              		.loc 1 662 0
 846              		.cfi_startproc
 847              		@ args = 0, pretend = 0, frame = 8
 848              		@ frame_needed = 1, uses_anonymous_args = 0
 849 0000 80B5     		push	{r7, lr}
 850              		.cfi_def_cfa_offset 8
 851              		.cfi_offset 7, -8
 852              		.cfi_offset 14, -4
 853 0002 82B0     		sub	sp, sp, #8
 854              		.cfi_def_cfa_offset 16
 855 0004 00AF     		add	r7, sp, #0
 856              		.cfi_def_cfa_register 7
 857 0006 7860     		str	r0, [r7, #4]
 663:Generated_Source\PSoC4/PM.c ****     PM_SAR_SATURATE_INTR_MASK_REG = mask & PM_MAX_CHANNELS_EN_MASK;
 858              		.loc 1 663 0
 859 0008 044B     		ldr	r3, .L60
 860 000a 7A68     		ldr	r2, [r7, #4]
 861 000c 0121     		movs	r1, #1
 862 000e 0A40     		ands	r2, r1
 863 0010 1A60     		str	r2, [r3]
 664:Generated_Source\PSoC4/PM.c **** }
 864              		.loc 1 664 0
 865 0012 C046     		nop
 866 0014 BD46     		mov	sp, r7
 867 0016 02B0     		add	sp, sp, #8
 868              		@ sp needed
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 28


 869 0018 80BD     		pop	{r7, pc}
 870              	.L61:
 871 001a C046     		.align	2
 872              	.L60:
 873 001c 28023A40 		.word	1077543464
 874              		.cfi_endproc
 875              	.LFE14:
 876              		.size	PM_SetSatMask, .-PM_SetSatMask
 877              		.section	.text.PM_SetOffset,"ax",%progbits
 878              		.align	2
 879              		.global	PM_SetOffset
 880              		.code	16
 881              		.thumb_func
 882              		.type	PM_SetOffset, %function
 883              	PM_SetOffset:
 884              	.LFB15:
 665:Generated_Source\PSoC4/PM.c **** 
 666:Generated_Source\PSoC4/PM.c **** 
 667:Generated_Source\PSoC4/PM.c **** /*******************************************************************************
 668:Generated_Source\PSoC4/PM.c **** * Function Name: PM_SetOffset
 669:Generated_Source\PSoC4/PM.c **** ********************************************************************************
 670:Generated_Source\PSoC4/PM.c **** *
 671:Generated_Source\PSoC4/PM.c **** * Summary:
 672:Generated_Source\PSoC4/PM.c **** *   Description: Sets the ADC offset which is used by the functions
 673:Generated_Source\PSoC4/PM.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:Generated_Source\PSoC4/PM.c **** *   to substract the offset from the given reading
 675:Generated_Source\PSoC4/PM.c **** *   before calculating the voltage conversion.
 676:Generated_Source\PSoC4/PM.c **** *
 677:Generated_Source\PSoC4/PM.c **** * Parameters:
 678:Generated_Source\PSoC4/PM.c **** *  chan: ADC channel number.
 679:Generated_Source\PSoC4/PM.c **** *  offset: This value is a measured value when the
 680:Generated_Source\PSoC4/PM.c **** *          inputs are shorted or connected to the same input voltage.
 681:Generated_Source\PSoC4/PM.c **** *
 682:Generated_Source\PSoC4/PM.c **** * Return:
 683:Generated_Source\PSoC4/PM.c **** *  None.
 684:Generated_Source\PSoC4/PM.c **** *
 685:Generated_Source\PSoC4/PM.c **** * Global variables:
 686:Generated_Source\PSoC4/PM.c **** *  PM_Offset:  Modified to set the user provided offset.
 687:Generated_Source\PSoC4/PM.c **** *
 688:Generated_Source\PSoC4/PM.c **** *******************************************************************************/
 689:Generated_Source\PSoC4/PM.c **** void PM_SetOffset(uint32 chan, int16 offset)
 690:Generated_Source\PSoC4/PM.c **** {
 885              		.loc 1 690 0
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 8
 888              		@ frame_needed = 1, uses_anonymous_args = 0
 889 0000 80B5     		push	{r7, lr}
 890              		.cfi_def_cfa_offset 8
 891              		.cfi_offset 7, -8
 892              		.cfi_offset 14, -4
 893 0002 82B0     		sub	sp, sp, #8
 894              		.cfi_def_cfa_offset 16
 895 0004 00AF     		add	r7, sp, #0
 896              		.cfi_def_cfa_register 7
 897 0006 7860     		str	r0, [r7, #4]
 898 0008 0A00     		movs	r2, r1
 899 000a BB1C     		adds	r3, r7, #2
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 29


 900 000c 1A80     		strh	r2, [r3]
 691:Generated_Source\PSoC4/PM.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:Generated_Source\PSoC4/PM.c ****     CYASSERT(chan < PM_TOTAL_CHANNELS_NUM);
 901              		.loc 1 692 0
 902 000e 7B68     		ldr	r3, [r7, #4]
 903 0010 002B     		cmp	r3, #0
 904 0012 02D0     		beq	.L63
 905              		.loc 1 692 0 is_stmt 0 discriminator 1
 906 0014 0020     		movs	r0, #0
 907 0016 FFF7FEFF 		bl	CyHalt
 908              	.L63:
 693:Generated_Source\PSoC4/PM.c **** 
 694:Generated_Source\PSoC4/PM.c ****     PM_offset[chan] = offset;
 909              		.loc 1 694 0 is_stmt 1
 910 001a 054B     		ldr	r3, .L64
 911 001c 7A68     		ldr	r2, [r7, #4]
 912 001e 5200     		lsls	r2, r2, #1
 913 0020 B91C     		adds	r1, r7, #2
 914 0022 0988     		ldrh	r1, [r1]
 915 0024 D152     		strh	r1, [r2, r3]
 695:Generated_Source\PSoC4/PM.c **** }
 916              		.loc 1 695 0
 917 0026 C046     		nop
 918 0028 BD46     		mov	sp, r7
 919 002a 02B0     		add	sp, sp, #8
 920              		@ sp needed
 921 002c 80BD     		pop	{r7, pc}
 922              	.L65:
 923 002e C046     		.align	2
 924              	.L64:
 925 0030 00000000 		.word	PM_offset
 926              		.cfi_endproc
 927              	.LFE15:
 928              		.size	PM_SetOffset, .-PM_SetOffset
 929              		.section	.text.PM_SetGain,"ax",%progbits
 930              		.align	2
 931              		.global	PM_SetGain
 932              		.code	16
 933              		.thumb_func
 934              		.type	PM_SetGain, %function
 935              	PM_SetGain:
 936              	.LFB16:
 696:Generated_Source\PSoC4/PM.c **** 
 697:Generated_Source\PSoC4/PM.c **** 
 698:Generated_Source\PSoC4/PM.c **** /*******************************************************************************
 699:Generated_Source\PSoC4/PM.c **** * Function Name: PM_SetGain
 700:Generated_Source\PSoC4/PM.c **** ********************************************************************************
 701:Generated_Source\PSoC4/PM.c **** *
 702:Generated_Source\PSoC4/PM.c **** * Summary:
 703:Generated_Source\PSoC4/PM.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:Generated_Source\PSoC4/PM.c **** *  conversion functions below. This value is set by default by the
 705:Generated_Source\PSoC4/PM.c **** *  reference and input range settings. It should only be used to further
 706:Generated_Source\PSoC4/PM.c **** *  calibrate the ADC with a known input or if an external reference is
 707:Generated_Source\PSoC4/PM.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:Generated_Source\PSoC4/PM.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:Generated_Source\PSoC4/PM.c **** *  conversion between ADC counts and voltage.
 710:Generated_Source\PSoC4/PM.c **** *
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 30


 711:Generated_Source\PSoC4/PM.c **** * Parameters:
 712:Generated_Source\PSoC4/PM.c **** *  chan: ADC channel number.
 713:Generated_Source\PSoC4/PM.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:Generated_Source\PSoC4/PM.c **** *
 715:Generated_Source\PSoC4/PM.c **** * Return:
 716:Generated_Source\PSoC4/PM.c **** *  None.
 717:Generated_Source\PSoC4/PM.c **** *
 718:Generated_Source\PSoC4/PM.c **** * Global variables:
 719:Generated_Source\PSoC4/PM.c **** *  PM_CountsPer10Volt:  modified to set the ADC gain in counts
 720:Generated_Source\PSoC4/PM.c **** *   per 10 volt.
 721:Generated_Source\PSoC4/PM.c **** *
 722:Generated_Source\PSoC4/PM.c **** *******************************************************************************/
 723:Generated_Source\PSoC4/PM.c **** void PM_SetGain(uint32 chan, int32 adcGain)
 724:Generated_Source\PSoC4/PM.c **** {
 937              		.loc 1 724 0
 938              		.cfi_startproc
 939              		@ args = 0, pretend = 0, frame = 8
 940              		@ frame_needed = 1, uses_anonymous_args = 0
 941 0000 80B5     		push	{r7, lr}
 942              		.cfi_def_cfa_offset 8
 943              		.cfi_offset 7, -8
 944              		.cfi_offset 14, -4
 945 0002 82B0     		sub	sp, sp, #8
 946              		.cfi_def_cfa_offset 16
 947 0004 00AF     		add	r7, sp, #0
 948              		.cfi_def_cfa_register 7
 949 0006 7860     		str	r0, [r7, #4]
 950 0008 3960     		str	r1, [r7]
 725:Generated_Source\PSoC4/PM.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:Generated_Source\PSoC4/PM.c ****     CYASSERT(chan < PM_TOTAL_CHANNELS_NUM);
 951              		.loc 1 726 0
 952 000a 7B68     		ldr	r3, [r7, #4]
 953 000c 002B     		cmp	r3, #0
 954 000e 02D0     		beq	.L67
 955              		.loc 1 726 0 is_stmt 0 discriminator 1
 956 0010 0020     		movs	r0, #0
 957 0012 FFF7FEFF 		bl	CyHalt
 958              	.L67:
 727:Generated_Source\PSoC4/PM.c **** 
 728:Generated_Source\PSoC4/PM.c ****     PM_countsPer10Volt[chan] = adcGain;
 959              		.loc 1 728 0 is_stmt 1
 960 0016 044B     		ldr	r3, .L68
 961 0018 7A68     		ldr	r2, [r7, #4]
 962 001a 9200     		lsls	r2, r2, #2
 963 001c 3968     		ldr	r1, [r7]
 964 001e D150     		str	r1, [r2, r3]
 729:Generated_Source\PSoC4/PM.c **** }
 965              		.loc 1 729 0
 966 0020 C046     		nop
 967 0022 BD46     		mov	sp, r7
 968 0024 02B0     		add	sp, sp, #8
 969              		@ sp needed
 970 0026 80BD     		pop	{r7, pc}
 971              	.L69:
 972              		.align	2
 973              	.L68:
 974 0028 00000000 		.word	PM_countsPer10Volt
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 31


 975              		.cfi_endproc
 976              	.LFE16:
 977              		.size	PM_SetGain, .-PM_SetGain
 978              		.section	.text.PM_CountsTo_mVolts,"ax",%progbits
 979              		.align	2
 980              		.global	PM_CountsTo_mVolts
 981              		.code	16
 982              		.thumb_func
 983              		.type	PM_CountsTo_mVolts, %function
 984              	PM_CountsTo_mVolts:
 985              	.LFB17:
 730:Generated_Source\PSoC4/PM.c **** 
 731:Generated_Source\PSoC4/PM.c **** 
 732:Generated_Source\PSoC4/PM.c **** #if(PM_DEFAULT_JUSTIFICATION_SEL == PM__RIGHT)
 733:Generated_Source\PSoC4/PM.c **** 
 734:Generated_Source\PSoC4/PM.c **** 
 735:Generated_Source\PSoC4/PM.c ****     /*******************************************************************************
 736:Generated_Source\PSoC4/PM.c ****     * Function Name: PM_CountsTo_mVolts
 737:Generated_Source\PSoC4/PM.c ****     ********************************************************************************
 738:Generated_Source\PSoC4/PM.c ****     *
 739:Generated_Source\PSoC4/PM.c ****     * Summary:
 740:Generated_Source\PSoC4/PM.c ****     *  This function converts ADC counts to mVolts
 741:Generated_Source\PSoC4/PM.c ****     *  This function is not available when left data format justification selected.
 742:Generated_Source\PSoC4/PM.c ****     *
 743:Generated_Source\PSoC4/PM.c ****     * Parameters:
 744:Generated_Source\PSoC4/PM.c ****     *  chan: The ADC channel number.
 745:Generated_Source\PSoC4/PM.c ****     *  adcCounts: Result from the ADC conversion
 746:Generated_Source\PSoC4/PM.c ****     *
 747:Generated_Source\PSoC4/PM.c ****     * Return:
 748:Generated_Source\PSoC4/PM.c ****     *  Results in mVolts
 749:Generated_Source\PSoC4/PM.c ****     *
 750:Generated_Source\PSoC4/PM.c ****     * Global variables:
 751:Generated_Source\PSoC4/PM.c ****     *  PM_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:Generated_Source\PSoC4/PM.c ****     *  PM_Offset:  Used as the offset while converting ADC counts
 753:Generated_Source\PSoC4/PM.c ****     *   to mVolts.
 754:Generated_Source\PSoC4/PM.c ****     *
 755:Generated_Source\PSoC4/PM.c ****     *******************************************************************************/
 756:Generated_Source\PSoC4/PM.c ****     int16 PM_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:Generated_Source\PSoC4/PM.c ****     {
 986              		.loc 1 757 0
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 16
 989              		@ frame_needed = 1, uses_anonymous_args = 0
 990 0000 80B5     		push	{r7, lr}
 991              		.cfi_def_cfa_offset 8
 992              		.cfi_offset 7, -8
 993              		.cfi_offset 14, -4
 994 0002 84B0     		sub	sp, sp, #16
 995              		.cfi_def_cfa_offset 24
 996 0004 00AF     		add	r7, sp, #0
 997              		.cfi_def_cfa_register 7
 998 0006 7860     		str	r0, [r7, #4]
 999 0008 0A00     		movs	r2, r1
 1000 000a BB1C     		adds	r3, r7, #2
 1001 000c 1A80     		strh	r2, [r3]
 758:Generated_Source\PSoC4/PM.c ****         int16 mVolts;
 759:Generated_Source\PSoC4/PM.c **** 
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 32


 760:Generated_Source\PSoC4/PM.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:Generated_Source\PSoC4/PM.c ****         CYASSERT(chan < PM_TOTAL_CHANNELS_NUM);
 1002              		.loc 1 761 0
 1003 000e 7B68     		ldr	r3, [r7, #4]
 1004 0010 002B     		cmp	r3, #0
 1005 0012 02D0     		beq	.L71
 1006              		.loc 1 761 0 is_stmt 0 discriminator 1
 1007 0014 0020     		movs	r0, #0
 1008 0016 FFF7FEFF 		bl	CyHalt
 1009              	.L71:
 762:Generated_Source\PSoC4/PM.c **** 
 763:Generated_Source\PSoC4/PM.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:Generated_Source\PSoC4/PM.c ****         #if(PM_DEFAULT_AVG_MODE == PM__ACCUMULATE)
 765:Generated_Source\PSoC4/PM.c ****             if((PM_channelsConfig[chan] & PM_AVERAGING_EN) != 0u)
 766:Generated_Source\PSoC4/PM.c ****             {
 767:Generated_Source\PSoC4/PM.c ****                 adcCounts /= PM_DEFAULT_AVG_SAMPLES_DIV;
 768:Generated_Source\PSoC4/PM.c ****             }
 769:Generated_Source\PSoC4/PM.c ****         #endif /* PM_DEFAULT_AVG_MODE == PM__ACCUMULATE */
 770:Generated_Source\PSoC4/PM.c **** 
 771:Generated_Source\PSoC4/PM.c ****         /* Subtract ADC offset */
 772:Generated_Source\PSoC4/PM.c ****         adcCounts -= PM_offset[chan];
 1010              		.loc 1 772 0 is_stmt 1
 1011 001a 1E4B     		ldr	r3, .L77
 1012 001c 7A68     		ldr	r2, [r7, #4]
 1013 001e 5200     		lsls	r2, r2, #1
 1014 0020 D35A     		ldrh	r3, [r2, r3]
 1015 0022 19B2     		sxth	r1, r3
 1016 0024 BB1C     		adds	r3, r7, #2
 1017 0026 1A88     		ldrh	r2, [r3]
 1018 0028 8BB2     		uxth	r3, r1
 1019 002a D31A     		subs	r3, r2, r3
 1020 002c 9AB2     		uxth	r2, r3
 1021 002e BB1C     		adds	r3, r7, #2
 1022 0030 1A80     		strh	r2, [r3]
 773:Generated_Source\PSoC4/PM.c **** 
 774:Generated_Source\PSoC4/PM.c ****         mVolts = (int16)((((int32)adcCounts * PM_10MV_COUNTS) + ( (adcCounts > 0) ?
 1023              		.loc 1 774 0
 1024 0032 BB1C     		adds	r3, r7, #2
 1025 0034 0022     		movs	r2, #0
 1026 0036 9B5E     		ldrsh	r3, [r3, r2]
 1027 0038 174A     		ldr	r2, .L77+4
 1028 003a 5A43     		muls	r2, r3
 775:Generated_Source\PSoC4/PM.c ****                  (PM_countsPer10Volt[chan] / 2) : (-(PM_countsPer10Volt[chan] / 2)) ))
 1029              		.loc 1 775 0
 1030 003c BB1C     		adds	r3, r7, #2
 1031 003e 0021     		movs	r1, #0
 1032 0040 5B5E     		ldrsh	r3, [r3, r1]
 1033 0042 002B     		cmp	r3, #0
 1034 0044 08DD     		ble	.L72
 1035              		.loc 1 775 0 is_stmt 0 discriminator 1
 1036 0046 154B     		ldr	r3, .L77+8
 1037 0048 7968     		ldr	r1, [r7, #4]
 1038 004a 8900     		lsls	r1, r1, #2
 1039 004c CB58     		ldr	r3, [r1, r3]
 1040 004e 002B     		cmp	r3, #0
 1041 0050 00DA     		bge	.L73
 1042 0052 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 33


 1043              	.L73:
 1044 0054 5B10     		asrs	r3, r3, #1
 1045 0056 08E0     		b	.L74
 1046              	.L72:
 1047              		.loc 1 775 0 discriminator 2
 1048 0058 104B     		ldr	r3, .L77+8
 1049 005a 7968     		ldr	r1, [r7, #4]
 1050 005c 8900     		lsls	r1, r1, #2
 1051 005e CB58     		ldr	r3, [r1, r3]
 1052 0060 002B     		cmp	r3, #0
 1053 0062 00DA     		bge	.L75
 1054 0064 0133     		adds	r3, r3, #1
 1055              	.L75:
 1056 0066 5B10     		asrs	r3, r3, #1
 1057 0068 5B42     		rsbs	r3, r3, #0
 1058              	.L74:
 774:Generated_Source\PSoC4/PM.c ****                  (PM_countsPer10Volt[chan] / 2) : (-(PM_countsPer10Volt[chan] / 2)) ))
 1059              		.loc 1 774 0 is_stmt 1
 1060 006a D018     		adds	r0, r2, r3
 776:Generated_Source\PSoC4/PM.c ****                  / PM_countsPer10Volt[chan]);
 1061              		.loc 1 776 0
 1062 006c 0B4B     		ldr	r3, .L77+8
 1063 006e 7A68     		ldr	r2, [r7, #4]
 1064 0070 9200     		lsls	r2, r2, #2
 1065 0072 D358     		ldr	r3, [r2, r3]
 1066 0074 1900     		movs	r1, r3
 1067 0076 FFF7FEFF 		bl	__aeabi_idiv
 1068 007a 0300     		movs	r3, r0
 1069 007c 1A00     		movs	r2, r3
 774:Generated_Source\PSoC4/PM.c ****                  (PM_countsPer10Volt[chan] / 2) : (-(PM_countsPer10Volt[chan] / 2)) ))
 1070              		.loc 1 774 0
 1071 007e 0E23     		movs	r3, #14
 1072 0080 FB18     		adds	r3, r7, r3
 1073 0082 1A80     		strh	r2, [r3]
 777:Generated_Source\PSoC4/PM.c **** 
 778:Generated_Source\PSoC4/PM.c ****         return( mVolts );
 1074              		.loc 1 778 0
 1075 0084 0E23     		movs	r3, #14
 1076 0086 FB18     		adds	r3, r7, r3
 1077 0088 0022     		movs	r2, #0
 1078 008a 9B5E     		ldrsh	r3, [r3, r2]
 779:Generated_Source\PSoC4/PM.c ****     }
 1079              		.loc 1 779 0
 1080 008c 1800     		movs	r0, r3
 1081 008e BD46     		mov	sp, r7
 1082 0090 04B0     		add	sp, sp, #16
 1083              		@ sp needed
 1084 0092 80BD     		pop	{r7, pc}
 1085              	.L78:
 1086              		.align	2
 1087              	.L77:
 1088 0094 00000000 		.word	PM_offset
 1089 0098 10270000 		.word	10000
 1090 009c 00000000 		.word	PM_countsPer10Volt
 1091              		.cfi_endproc
 1092              	.LFE17:
 1093              		.size	PM_CountsTo_mVolts, .-PM_CountsTo_mVolts
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 34


 1094              		.global	__aeabi_lmul
 1095              		.global	__aeabi_ldivmod
 1096              		.section	.text.PM_CountsTo_uVolts,"ax",%progbits
 1097              		.align	2
 1098              		.global	PM_CountsTo_uVolts
 1099              		.code	16
 1100              		.thumb_func
 1101              		.type	PM_CountsTo_uVolts, %function
 1102              	PM_CountsTo_uVolts:
 1103              	.LFB18:
 780:Generated_Source\PSoC4/PM.c **** 
 781:Generated_Source\PSoC4/PM.c **** 
 782:Generated_Source\PSoC4/PM.c ****     /*******************************************************************************
 783:Generated_Source\PSoC4/PM.c ****     * Function Name: PM_CountsTo_uVolts
 784:Generated_Source\PSoC4/PM.c ****     ********************************************************************************
 785:Generated_Source\PSoC4/PM.c ****     *
 786:Generated_Source\PSoC4/PM.c ****     * Summary:
 787:Generated_Source\PSoC4/PM.c ****     *  This function converts ADC counts to micro Volts
 788:Generated_Source\PSoC4/PM.c ****     *  This function is not available when left data format justification selected.
 789:Generated_Source\PSoC4/PM.c ****     *
 790:Generated_Source\PSoC4/PM.c ****     * Parameters:
 791:Generated_Source\PSoC4/PM.c ****     *  chan: The ADC channel number.
 792:Generated_Source\PSoC4/PM.c ****     *  adcCounts: Result from the ADC conversion
 793:Generated_Source\PSoC4/PM.c ****     *
 794:Generated_Source\PSoC4/PM.c ****     * Return:
 795:Generated_Source\PSoC4/PM.c ****     *  Results in uVolts
 796:Generated_Source\PSoC4/PM.c ****     *
 797:Generated_Source\PSoC4/PM.c ****     * Global variables:
 798:Generated_Source\PSoC4/PM.c ****     *  PM_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:Generated_Source\PSoC4/PM.c ****     *  PM_Offset:  Used as the offset while converting ADC counts
 800:Generated_Source\PSoC4/PM.c ****     *   to mVolts.
 801:Generated_Source\PSoC4/PM.c ****     *
 802:Generated_Source\PSoC4/PM.c ****     * Theory:
 803:Generated_Source\PSoC4/PM.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:Generated_Source\PSoC4/PM.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:Generated_Source\PSoC4/PM.c ****     *  resolution.
 806:Generated_Source\PSoC4/PM.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:Generated_Source\PSoC4/PM.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:Generated_Source\PSoC4/PM.c ****     *
 809:Generated_Source\PSoC4/PM.c ****     *******************************************************************************/
 810:Generated_Source\PSoC4/PM.c ****     int32 PM_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:Generated_Source\PSoC4/PM.c ****     {
 1104              		.loc 1 811 0
 1105              		.cfi_startproc
 1106              		@ args = 0, pretend = 0, frame = 24
 1107              		@ frame_needed = 1, uses_anonymous_args = 0
 1108 0000 B0B5     		push	{r4, r5, r7, lr}
 1109              		.cfi_def_cfa_offset 16
 1110              		.cfi_offset 4, -16
 1111              		.cfi_offset 5, -12
 1112              		.cfi_offset 7, -8
 1113              		.cfi_offset 14, -4
 1114 0002 86B0     		sub	sp, sp, #24
 1115              		.cfi_def_cfa_offset 40
 1116 0004 00AF     		add	r7, sp, #0
 1117              		.cfi_def_cfa_register 7
 1118 0006 F860     		str	r0, [r7, #12]
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 35


 1119 0008 0A00     		movs	r2, r1
 1120 000a 0A23     		movs	r3, #10
 1121 000c FB18     		adds	r3, r7, r3
 1122 000e 1A80     		strh	r2, [r3]
 812:Generated_Source\PSoC4/PM.c ****         int64 uVolts;
 813:Generated_Source\PSoC4/PM.c **** 
 814:Generated_Source\PSoC4/PM.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:Generated_Source\PSoC4/PM.c ****         CYASSERT(chan < PM_TOTAL_CHANNELS_NUM);
 1123              		.loc 1 815 0
 1124 0010 FB68     		ldr	r3, [r7, #12]
 1125 0012 002B     		cmp	r3, #0
 1126 0014 02D0     		beq	.L80
 1127              		.loc 1 815 0 is_stmt 0 discriminator 1
 1128 0016 0020     		movs	r0, #0
 1129 0018 FFF7FEFF 		bl	CyHalt
 1130              	.L80:
 816:Generated_Source\PSoC4/PM.c **** 
 817:Generated_Source\PSoC4/PM.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:Generated_Source\PSoC4/PM.c ****         #if(PM_DEFAULT_AVG_MODE == PM__ACCUMULATE)
 819:Generated_Source\PSoC4/PM.c ****             if((PM_channelsConfig[chan] & PM_AVERAGING_EN) != 0u)
 820:Generated_Source\PSoC4/PM.c ****             {
 821:Generated_Source\PSoC4/PM.c ****                 adcCounts /= PM_DEFAULT_AVG_SAMPLES_DIV;
 822:Generated_Source\PSoC4/PM.c ****             }
 823:Generated_Source\PSoC4/PM.c ****         #endif /* PM_DEFAULT_AVG_MODE == PM__ACCUMULATE */
 824:Generated_Source\PSoC4/PM.c **** 
 825:Generated_Source\PSoC4/PM.c ****         /* Subtract ADC offset */
 826:Generated_Source\PSoC4/PM.c ****         adcCounts -= PM_offset[chan];
 1131              		.loc 1 826 0 is_stmt 1
 1132 001c 194B     		ldr	r3, .L82
 1133 001e FA68     		ldr	r2, [r7, #12]
 1134 0020 5200     		lsls	r2, r2, #1
 1135 0022 D35A     		ldrh	r3, [r2, r3]
 1136 0024 19B2     		sxth	r1, r3
 1137 0026 0A23     		movs	r3, #10
 1138 0028 FB18     		adds	r3, r7, r3
 1139 002a 1A88     		ldrh	r2, [r3]
 1140 002c 8BB2     		uxth	r3, r1
 1141 002e D31A     		subs	r3, r2, r3
 1142 0030 9AB2     		uxth	r2, r3
 1143 0032 0A23     		movs	r3, #10
 1144 0034 FB18     		adds	r3, r7, r3
 1145 0036 1A80     		strh	r2, [r3]
 827:Generated_Source\PSoC4/PM.c **** 
 828:Generated_Source\PSoC4/PM.c ****         uVolts = ((int64)adcCounts * PM_10UV_COUNTS) / PM_countsPer10Volt[chan];
 1146              		.loc 1 828 0
 1147 0038 0A23     		movs	r3, #10
 1148 003a FB18     		adds	r3, r7, r3
 1149 003c 1B88     		ldrh	r3, [r3]
 1150 003e 1BB2     		sxth	r3, r3
 1151 0040 3B60     		str	r3, [r7]
 1152 0042 DB17     		asrs	r3, r3, #31
 1153 0044 7B60     		str	r3, [r7, #4]
 1154 0046 104A     		ldr	r2, .L82+4
 1155 0048 0023     		movs	r3, #0
 1156 004a 3868     		ldr	r0, [r7]
 1157 004c 7968     		ldr	r1, [r7, #4]
 1158 004e FFF7FEFF 		bl	__aeabi_lmul
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 36


 1159 0052 0200     		movs	r2, r0
 1160 0054 0B00     		movs	r3, r1
 1161 0056 1000     		movs	r0, r2
 1162 0058 1900     		movs	r1, r3
 1163 005a 0C4B     		ldr	r3, .L82+8
 1164 005c FA68     		ldr	r2, [r7, #12]
 1165 005e 9200     		lsls	r2, r2, #2
 1166 0060 D358     		ldr	r3, [r2, r3]
 1167 0062 1C00     		movs	r4, r3
 1168 0064 DB17     		asrs	r3, r3, #31
 1169 0066 1D00     		movs	r5, r3
 1170 0068 2200     		movs	r2, r4
 1171 006a 2B00     		movs	r3, r5
 1172 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1173 0070 0300     		movs	r3, r0
 1174 0072 0C00     		movs	r4, r1
 1175 0074 3B61     		str	r3, [r7, #16]
 1176 0076 7C61     		str	r4, [r7, #20]
 829:Generated_Source\PSoC4/PM.c **** 
 830:Generated_Source\PSoC4/PM.c ****         return( (int32)uVolts );
 1177              		.loc 1 830 0
 1178 0078 3B69     		ldr	r3, [r7, #16]
 831:Generated_Source\PSoC4/PM.c ****     }
 1179              		.loc 1 831 0
 1180 007a 1800     		movs	r0, r3
 1181 007c BD46     		mov	sp, r7
 1182 007e 06B0     		add	sp, sp, #24
 1183              		@ sp needed
 1184 0080 B0BD     		pop	{r4, r5, r7, pc}
 1185              	.L83:
 1186 0082 C046     		.align	2
 1187              	.L82:
 1188 0084 00000000 		.word	PM_offset
 1189 0088 80969800 		.word	10000000
 1190 008c 00000000 		.word	PM_countsPer10Volt
 1191              		.cfi_endproc
 1192              	.LFE18:
 1193              		.size	PM_CountsTo_uVolts, .-PM_CountsTo_uVolts
 1194              		.global	__aeabi_i2f
 1195              		.global	__aeabi_fmul
 1196              		.global	__aeabi_fdiv
 1197              		.section	.text.PM_CountsTo_Volts,"ax",%progbits
 1198              		.align	2
 1199              		.global	PM_CountsTo_Volts
 1200              		.code	16
 1201              		.thumb_func
 1202              		.type	PM_CountsTo_Volts, %function
 1203              	PM_CountsTo_Volts:
 1204              	.LFB19:
 832:Generated_Source\PSoC4/PM.c **** 
 833:Generated_Source\PSoC4/PM.c **** 
 834:Generated_Source\PSoC4/PM.c ****     /*******************************************************************************
 835:Generated_Source\PSoC4/PM.c ****     * Function Name: PM_CountsTo_Volts
 836:Generated_Source\PSoC4/PM.c ****     ********************************************************************************
 837:Generated_Source\PSoC4/PM.c ****     *
 838:Generated_Source\PSoC4/PM.c ****     * Summary:
 839:Generated_Source\PSoC4/PM.c ****     *  Converts the ADC output to Volts as a floating point number.
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 37


 840:Generated_Source\PSoC4/PM.c ****     *  This function is not available when left data format justification selected.
 841:Generated_Source\PSoC4/PM.c ****     *
 842:Generated_Source\PSoC4/PM.c ****     * Parameters:
 843:Generated_Source\PSoC4/PM.c ****     *  chan: The ADC channel number.
 844:Generated_Source\PSoC4/PM.c ****     *  Result from the ADC conversion
 845:Generated_Source\PSoC4/PM.c ****     *
 846:Generated_Source\PSoC4/PM.c ****     * Return:
 847:Generated_Source\PSoC4/PM.c ****     *  Results in Volts
 848:Generated_Source\PSoC4/PM.c ****     *
 849:Generated_Source\PSoC4/PM.c ****     * Global variables:
 850:Generated_Source\PSoC4/PM.c ****     *  PM_countsPer10Volt:  used to convert ADC counts to Volts.
 851:Generated_Source\PSoC4/PM.c ****     *  PM_Offset:  Used as the offset while converting ADC counts
 852:Generated_Source\PSoC4/PM.c ****     *   to mVolts.
 853:Generated_Source\PSoC4/PM.c ****     *
 854:Generated_Source\PSoC4/PM.c ****     *******************************************************************************/
 855:Generated_Source\PSoC4/PM.c ****     float32 PM_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:Generated_Source\PSoC4/PM.c ****     {
 1205              		.loc 1 856 0
 1206              		.cfi_startproc
 1207              		@ args = 0, pretend = 0, frame = 16
 1208              		@ frame_needed = 1, uses_anonymous_args = 0
 1209 0000 90B5     		push	{r4, r7, lr}
 1210              		.cfi_def_cfa_offset 12
 1211              		.cfi_offset 4, -12
 1212              		.cfi_offset 7, -8
 1213              		.cfi_offset 14, -4
 1214 0002 85B0     		sub	sp, sp, #20
 1215              		.cfi_def_cfa_offset 32
 1216 0004 00AF     		add	r7, sp, #0
 1217              		.cfi_def_cfa_register 7
 1218 0006 7860     		str	r0, [r7, #4]
 1219 0008 0A00     		movs	r2, r1
 1220 000a BB1C     		adds	r3, r7, #2
 1221 000c 1A80     		strh	r2, [r3]
 857:Generated_Source\PSoC4/PM.c ****         float32 volts;
 858:Generated_Source\PSoC4/PM.c **** 
 859:Generated_Source\PSoC4/PM.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:Generated_Source\PSoC4/PM.c ****         CYASSERT(chan < PM_TOTAL_CHANNELS_NUM);
 1222              		.loc 1 860 0
 1223 000e 7B68     		ldr	r3, [r7, #4]
 1224 0010 002B     		cmp	r3, #0
 1225 0012 02D0     		beq	.L85
 1226              		.loc 1 860 0 is_stmt 0 discriminator 1
 1227 0014 0020     		movs	r0, #0
 1228 0016 FFF7FEFF 		bl	CyHalt
 1229              	.L85:
 861:Generated_Source\PSoC4/PM.c **** 
 862:Generated_Source\PSoC4/PM.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:Generated_Source\PSoC4/PM.c ****         #if(PM_DEFAULT_AVG_MODE == PM__ACCUMULATE)
 864:Generated_Source\PSoC4/PM.c ****             if((PM_channelsConfig[chan] & PM_AVERAGING_EN) != 0u)
 865:Generated_Source\PSoC4/PM.c ****             {
 866:Generated_Source\PSoC4/PM.c ****                 adcCounts /= PM_DEFAULT_AVG_SAMPLES_DIV;
 867:Generated_Source\PSoC4/PM.c ****             }
 868:Generated_Source\PSoC4/PM.c ****         #endif /* PM_DEFAULT_AVG_MODE == PM__ACCUMULATE */
 869:Generated_Source\PSoC4/PM.c **** 
 870:Generated_Source\PSoC4/PM.c ****         /* Subtract ADC offset */
 871:Generated_Source\PSoC4/PM.c ****         adcCounts -= PM_offset[chan];
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 38


 1230              		.loc 1 871 0 is_stmt 1
 1231 001a 164B     		ldr	r3, .L87
 1232 001c 7A68     		ldr	r2, [r7, #4]
 1233 001e 5200     		lsls	r2, r2, #1
 1234 0020 D35A     		ldrh	r3, [r2, r3]
 1235 0022 19B2     		sxth	r1, r3
 1236 0024 BB1C     		adds	r3, r7, #2
 1237 0026 1A88     		ldrh	r2, [r3]
 1238 0028 8BB2     		uxth	r3, r1
 1239 002a D31A     		subs	r3, r2, r3
 1240 002c 9AB2     		uxth	r2, r3
 1241 002e BB1C     		adds	r3, r7, #2
 1242 0030 1A80     		strh	r2, [r3]
 872:Generated_Source\PSoC4/PM.c **** 
 873:Generated_Source\PSoC4/PM.c ****         volts = ((float32)adcCounts * PM_10V_COUNTS) / (float32)PM_countsPer10Volt[chan];
 1243              		.loc 1 873 0
 1244 0032 BB1C     		adds	r3, r7, #2
 1245 0034 0022     		movs	r2, #0
 1246 0036 9B5E     		ldrsh	r3, [r3, r2]
 1247 0038 1800     		movs	r0, r3
 1248 003a FFF7FEFF 		bl	__aeabi_i2f
 1249 003e 031C     		adds	r3, r0, #0
 1250 0040 0D49     		ldr	r1, .L87+4
 1251 0042 181C     		adds	r0, r3, #0
 1252 0044 FFF7FEFF 		bl	__aeabi_fmul
 1253 0048 031C     		adds	r3, r0, #0
 1254 004a 1C1C     		adds	r4, r3, #0
 1255 004c 0B4B     		ldr	r3, .L87+8
 1256 004e 7A68     		ldr	r2, [r7, #4]
 1257 0050 9200     		lsls	r2, r2, #2
 1258 0052 D358     		ldr	r3, [r2, r3]
 1259 0054 1800     		movs	r0, r3
 1260 0056 FFF7FEFF 		bl	__aeabi_i2f
 1261 005a 031C     		adds	r3, r0, #0
 1262 005c 191C     		adds	r1, r3, #0
 1263 005e 201C     		adds	r0, r4, #0
 1264 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1265 0064 031C     		adds	r3, r0, #0
 1266 0066 FB60     		str	r3, [r7, #12]
 874:Generated_Source\PSoC4/PM.c **** 
 875:Generated_Source\PSoC4/PM.c ****         return( volts );
 1267              		.loc 1 875 0
 1268 0068 FB68     		ldr	r3, [r7, #12]
 876:Generated_Source\PSoC4/PM.c ****     }
 1269              		.loc 1 876 0
 1270 006a 181C     		adds	r0, r3, #0
 1271 006c BD46     		mov	sp, r7
 1272 006e 05B0     		add	sp, sp, #20
 1273              		@ sp needed
 1274 0070 90BD     		pop	{r4, r7, pc}
 1275              	.L88:
 1276 0072 C046     		.align	2
 1277              	.L87:
 1278 0074 00000000 		.word	PM_offset
 1279 0078 00002041 		.word	1092616192
 1280 007c 00000000 		.word	PM_countsPer10Volt
 1281              		.cfi_endproc
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 39


 1282              	.LFE19:
 1283              		.size	PM_CountsTo_Volts, .-PM_CountsTo_Volts
 1284              		.text
 1285              	.Letext0:
 1286              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1287              		.section	.debug_info,"",%progbits
 1288              	.Ldebug_info0:
 1289 0000 8D040000 		.4byte	0x48d
 1290 0004 0400     		.2byte	0x4
 1291 0006 00000000 		.4byte	.Ldebug_abbrev0
 1292 000a 04       		.byte	0x4
 1293 000b 01       		.uleb128 0x1
 1294 000c 03010000 		.4byte	.LASF60
 1295 0010 0C       		.byte	0xc
 1296 0011 41030000 		.4byte	.LASF61
 1297 0015 D1020000 		.4byte	.LASF62
 1298 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1299 001d 00000000 		.4byte	0
 1300 0021 00000000 		.4byte	.Ldebug_line0
 1301 0025 02       		.uleb128 0x2
 1302 0026 01       		.byte	0x1
 1303 0027 06       		.byte	0x6
 1304 0028 48000000 		.4byte	.LASF0
 1305 002c 02       		.uleb128 0x2
 1306 002d 01       		.byte	0x1
 1307 002e 08       		.byte	0x8
 1308 002f 34020000 		.4byte	.LASF1
 1309 0033 02       		.uleb128 0x2
 1310 0034 02       		.byte	0x2
 1311 0035 05       		.byte	0x5
 1312 0036 52020000 		.4byte	.LASF2
 1313 003a 02       		.uleb128 0x2
 1314 003b 02       		.byte	0x2
 1315 003c 07       		.byte	0x7
 1316 003d E1000000 		.4byte	.LASF3
 1317 0041 02       		.uleb128 0x2
 1318 0042 04       		.byte	0x4
 1319 0043 05       		.byte	0x5
 1320 0044 72000000 		.4byte	.LASF4
 1321 0048 02       		.uleb128 0x2
 1322 0049 04       		.byte	0x4
 1323 004a 07       		.byte	0x7
 1324 004b BF000000 		.4byte	.LASF5
 1325 004f 02       		.uleb128 0x2
 1326 0050 08       		.byte	0x8
 1327 0051 05       		.byte	0x5
 1328 0052 3A000000 		.4byte	.LASF6
 1329 0056 02       		.uleb128 0x2
 1330 0057 08       		.byte	0x8
 1331 0058 07       		.byte	0x7
 1332 0059 16000000 		.4byte	.LASF7
 1333 005d 03       		.uleb128 0x3
 1334 005e 04       		.byte	0x4
 1335 005f 05       		.byte	0x5
 1336 0060 696E7400 		.ascii	"int\000"
 1337 0064 02       		.uleb128 0x2
 1338 0065 04       		.byte	0x4
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 40


 1339 0066 07       		.byte	0x7
 1340 0067 AB000000 		.4byte	.LASF8
 1341 006b 04       		.uleb128 0x4
 1342 006c 7B000000 		.4byte	.LASF9
 1343 0070 02       		.byte	0x2
 1344 0071 FC01     		.2byte	0x1fc
 1345 0073 2C000000 		.4byte	0x2c
 1346 0077 04       		.uleb128 0x4
 1347 0078 00000000 		.4byte	.LASF10
 1348 007c 02       		.byte	0x2
 1349 007d FD01     		.2byte	0x1fd
 1350 007f 3A000000 		.4byte	0x3a
 1351 0083 04       		.uleb128 0x4
 1352 0084 97000000 		.4byte	.LASF11
 1353 0088 02       		.byte	0x2
 1354 0089 FE01     		.2byte	0x1fe
 1355 008b 48000000 		.4byte	0x48
 1356 008f 04       		.uleb128 0x4
 1357 0090 28030000 		.4byte	.LASF12
 1358 0094 02       		.byte	0x2
 1359 0095 0002     		.2byte	0x200
 1360 0097 33000000 		.4byte	0x33
 1361 009b 04       		.uleb128 0x4
 1362 009c 62000000 		.4byte	.LASF13
 1363 00a0 02       		.byte	0x2
 1364 00a1 0102     		.2byte	0x201
 1365 00a3 41000000 		.4byte	0x41
 1366 00a7 04       		.uleb128 0x4
 1367 00a8 B6010000 		.4byte	.LASF14
 1368 00ac 02       		.byte	0x2
 1369 00ad 0202     		.2byte	0x202
 1370 00af B3000000 		.4byte	0xb3
 1371 00b3 02       		.uleb128 0x2
 1372 00b4 04       		.byte	0x4
 1373 00b5 04       		.byte	0x4
 1374 00b6 00020000 		.4byte	.LASF15
 1375 00ba 02       		.uleb128 0x2
 1376 00bb 08       		.byte	0x8
 1377 00bc 04       		.byte	0x4
 1378 00bd 81000000 		.4byte	.LASF16
 1379 00c1 04       		.uleb128 0x4
 1380 00c2 DC010000 		.4byte	.LASF17
 1381 00c6 02       		.byte	0x2
 1382 00c7 0702     		.2byte	0x207
 1383 00c9 4F000000 		.4byte	0x4f
 1384 00cd 02       		.uleb128 0x2
 1385 00ce 01       		.byte	0x1
 1386 00cf 08       		.byte	0x8
 1387 00d0 9C020000 		.4byte	.LASF18
 1388 00d4 04       		.uleb128 0x4
 1389 00d5 A1010000 		.4byte	.LASF19
 1390 00d9 02       		.byte	0x2
 1391 00da A802     		.2byte	0x2a8
 1392 00dc E0000000 		.4byte	0xe0
 1393 00e0 05       		.uleb128 0x5
 1394 00e1 83000000 		.4byte	0x83
 1395 00e5 02       		.uleb128 0x2
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 41


 1396 00e6 08       		.byte	0x8
 1397 00e7 04       		.byte	0x4
 1398 00e8 D0010000 		.4byte	.LASF20
 1399 00ec 02       		.uleb128 0x2
 1400 00ed 04       		.byte	0x4
 1401 00ee 07       		.byte	0x7
 1402 00ef BE010000 		.4byte	.LASF21
 1403 00f3 06       		.uleb128 0x6
 1404 00f4 98010000 		.4byte	.LASF25
 1405 00f8 01       		.byte	0x1
 1406 00f9 3F       		.byte	0x3f
 1407 00fa 00000000 		.4byte	.LFB2
 1408 00fe 24000000 		.4byte	.LFE2-.LFB2
 1409 0102 01       		.uleb128 0x1
 1410 0103 9C       		.byte	0x9c
 1411 0104 07       		.uleb128 0x7
 1412 0105 70030000 		.4byte	.LASF36
 1413 0109 01       		.byte	0x1
 1414 010a 5E       		.byte	0x5e
 1415 010b 00000000 		.4byte	.LFB3
 1416 010f CC010000 		.4byte	.LFE3-.LFB3
 1417 0113 01       		.uleb128 0x1
 1418 0114 9C       		.byte	0x9c
 1419 0115 44010000 		.4byte	0x144
 1420 0119 08       		.uleb128 0x8
 1421 011a 79020000 		.4byte	.LASF22
 1422 011e 01       		.byte	0x1
 1423 011f 60       		.byte	0x60
 1424 0120 83000000 		.4byte	0x83
 1425 0124 02       		.uleb128 0x2
 1426 0125 91       		.byte	0x91
 1427 0126 74       		.sleb128 -12
 1428 0127 08       		.uleb128 0x8
 1429 0128 D7000000 		.4byte	.LASF23
 1430 012c 01       		.byte	0x1
 1431 012d 61       		.byte	0x61
 1432 012e 83000000 		.4byte	0x83
 1433 0132 02       		.uleb128 0x2
 1434 0133 91       		.byte	0x91
 1435 0134 6C       		.sleb128 -20
 1436 0135 08       		.uleb128 0x8
 1437 0136 0F000000 		.4byte	.LASF24
 1438 013a 01       		.byte	0x1
 1439 013b 62       		.byte	0x62
 1440 013c 9B000000 		.4byte	0x9b
 1441 0140 02       		.uleb128 0x2
 1442 0141 91       		.byte	0x91
 1443 0142 70       		.sleb128 -16
 1444 0143 00       		.byte	0
 1445 0144 09       		.uleb128 0x9
 1446 0145 68000000 		.4byte	.LASF26
 1447 0149 01       		.byte	0x1
 1448 014a 4A01     		.2byte	0x14a
 1449 014c 00000000 		.4byte	.LFB4
 1450 0150 38000000 		.4byte	.LFE4-.LFB4
 1451 0154 01       		.uleb128 0x1
 1452 0155 9C       		.byte	0x9c
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 42


 1453 0156 0A       		.uleb128 0xa
 1454 0157 94020000 		.4byte	.LASF27
 1455 015b 01       		.byte	0x1
 1456 015c 6D01     		.2byte	0x16d
 1457 015e 00000000 		.4byte	.LFB5
 1458 0162 1C000000 		.4byte	.LFE5-.LFB5
 1459 0166 01       		.uleb128 0x1
 1460 0167 9C       		.byte	0x9c
 1461 0168 0A       		.uleb128 0xa
 1462 0169 7F020000 		.4byte	.LASF28
 1463 016d 01       		.byte	0x1
 1464 016e 8701     		.2byte	0x187
 1465 0170 00000000 		.4byte	.LFB6
 1466 0174 1C000000 		.4byte	.LFE6-.LFB6
 1467 0178 01       		.uleb128 0x1
 1468 0179 9C       		.byte	0x9c
 1469 017a 0A       		.uleb128 0xa
 1470 017b 88000000 		.4byte	.LASF29
 1471 017f 01       		.byte	0x1
 1472 0180 A001     		.2byte	0x1a0
 1473 0182 00000000 		.4byte	.LFB7
 1474 0186 20000000 		.4byte	.LFE7-.LFB7
 1475 018a 01       		.uleb128 0x1
 1476 018b 9C       		.byte	0x9c
 1477 018c 0B       		.uleb128 0xb
 1478 018d 2E030000 		.4byte	.LASF31
 1479 0191 01       		.byte	0x1
 1480 0192 C201     		.2byte	0x1c2
 1481 0194 83000000 		.4byte	0x83
 1482 0198 00000000 		.4byte	.LFB8
 1483 019c 48000000 		.4byte	.LFE8-.LFB8
 1484 01a0 01       		.uleb128 0x1
 1485 01a1 9C       		.byte	0x9c
 1486 01a2 C5010000 		.4byte	0x1c5
 1487 01a6 0C       		.uleb128 0xc
 1488 01a7 A3000000 		.4byte	.LASF33
 1489 01ab 01       		.byte	0x1
 1490 01ac C201     		.2byte	0x1c2
 1491 01ae 83000000 		.4byte	0x83
 1492 01b2 02       		.uleb128 0x2
 1493 01b3 91       		.byte	0x91
 1494 01b4 6C       		.sleb128 -20
 1495 01b5 0D       		.uleb128 0xd
 1496 01b6 21030000 		.4byte	.LASF30
 1497 01ba 01       		.byte	0x1
 1498 01bb C401     		.2byte	0x1c4
 1499 01bd 83000000 		.4byte	0x83
 1500 01c1 02       		.uleb128 0x2
 1501 01c2 91       		.byte	0x91
 1502 01c3 74       		.sleb128 -12
 1503 01c4 00       		.byte	0
 1504 01c5 0E       		.uleb128 0xe
 1505 01c6 B2020000 		.4byte	.LASF32
 1506 01ca 01       		.byte	0x1
 1507 01cb F801     		.2byte	0x1f8
 1508 01cd 8F000000 		.4byte	0x8f
 1509 01d1 00000000 		.4byte	.LFB9
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 43


 1510 01d5 44000000 		.4byte	.LFE9-.LFB9
 1511 01d9 01       		.uleb128 0x1
 1512 01da 9C       		.byte	0x9c
 1513 01db FE010000 		.4byte	0x1fe
 1514 01df 0C       		.uleb128 0xc
 1515 01e0 8F020000 		.4byte	.LASF34
 1516 01e4 01       		.byte	0x1
 1517 01e5 F801     		.2byte	0x1f8
 1518 01e7 83000000 		.4byte	0x83
 1519 01eb 02       		.uleb128 0x2
 1520 01ec 91       		.byte	0x91
 1521 01ed 6C       		.sleb128 -20
 1522 01ee 0D       		.uleb128 0xd
 1523 01ef 78030000 		.4byte	.LASF35
 1524 01f3 01       		.byte	0x1
 1525 01f4 FA01     		.2byte	0x1fa
 1526 01f6 83000000 		.4byte	0x83
 1527 01fa 02       		.uleb128 0x2
 1528 01fb 91       		.byte	0x91
 1529 01fc 74       		.sleb128 -12
 1530 01fd 00       		.byte	0
 1531 01fe 0F       		.uleb128 0xf
 1532 01ff F4000000 		.4byte	.LASF37
 1533 0203 01       		.byte	0x1
 1534 0204 2502     		.2byte	0x225
 1535 0206 00000000 		.4byte	.LFB10
 1536 020a 20000000 		.4byte	.LFE10-.LFB10
 1537 020e 01       		.uleb128 0x1
 1538 020f 9C       		.byte	0x9c
 1539 0210 24020000 		.4byte	0x224
 1540 0214 0C       		.uleb128 0xc
 1541 0215 9E000000 		.4byte	.LASF38
 1542 0219 01       		.byte	0x1
 1543 021a 2502     		.2byte	0x225
 1544 021c 83000000 		.4byte	0x83
 1545 0220 02       		.uleb128 0x2
 1546 0221 91       		.byte	0x91
 1547 0222 74       		.sleb128 -12
 1548 0223 00       		.byte	0
 1549 0224 0F       		.uleb128 0xf
 1550 0225 A7010000 		.4byte	.LASF39
 1551 0229 01       		.byte	0x1
 1552 022a 5102     		.2byte	0x251
 1553 022c 00000000 		.4byte	.LFB11
 1554 0230 30000000 		.4byte	.LFE11-.LFB11
 1555 0234 01       		.uleb128 0x1
 1556 0235 9C       		.byte	0x9c
 1557 0236 4A020000 		.4byte	0x24a
 1558 023a 0C       		.uleb128 0xc
 1559 023b C7010000 		.4byte	.LASF40
 1560 023f 01       		.byte	0x1
 1561 0240 5102     		.2byte	0x251
 1562 0242 83000000 		.4byte	0x83
 1563 0246 02       		.uleb128 0x2
 1564 0247 91       		.byte	0x91
 1565 0248 74       		.sleb128 -12
 1566 0249 00       		.byte	0
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 44


 1567 024a 0F       		.uleb128 0xf
 1568 024b C1020000 		.4byte	.LASF41
 1569 024f 01       		.byte	0x1
 1570 0250 6602     		.2byte	0x266
 1571 0252 00000000 		.4byte	.LFB12
 1572 0256 30000000 		.4byte	.LFE12-.LFB12
 1573 025a 01       		.uleb128 0x1
 1574 025b 9C       		.byte	0x9c
 1575 025c 70020000 		.4byte	0x270
 1576 0260 0C       		.uleb128 0xc
 1577 0261 18020000 		.4byte	.LASF42
 1578 0265 01       		.byte	0x1
 1579 0266 6602     		.2byte	0x266
 1580 0268 83000000 		.4byte	0x83
 1581 026c 02       		.uleb128 0x2
 1582 026d 91       		.byte	0x91
 1583 026e 74       		.sleb128 -12
 1584 026f 00       		.byte	0
 1585 0270 0F       		.uleb128 0xf
 1586 0271 42020000 		.4byte	.LASF43
 1587 0275 01       		.byte	0x1
 1588 0276 7E02     		.2byte	0x27e
 1589 0278 00000000 		.4byte	.LFB13
 1590 027c 20000000 		.4byte	.LFE13-.LFB13
 1591 0280 01       		.uleb128 0x1
 1592 0281 9C       		.byte	0x9c
 1593 0282 96020000 		.4byte	0x296
 1594 0286 0C       		.uleb128 0xc
 1595 0287 9E000000 		.4byte	.LASF38
 1596 028b 01       		.byte	0x1
 1597 028c 7E02     		.2byte	0x27e
 1598 028e 83000000 		.4byte	0x83
 1599 0292 02       		.uleb128 0x2
 1600 0293 91       		.byte	0x91
 1601 0294 74       		.sleb128 -12
 1602 0295 00       		.byte	0
 1603 0296 0F       		.uleb128 0xf
 1604 0297 54000000 		.4byte	.LASF44
 1605 029b 01       		.byte	0x1
 1606 029c 9502     		.2byte	0x295
 1607 029e 00000000 		.4byte	.LFB14
 1608 02a2 20000000 		.4byte	.LFE14-.LFB14
 1609 02a6 01       		.uleb128 0x1
 1610 02a7 9C       		.byte	0x9c
 1611 02a8 BC020000 		.4byte	0x2bc
 1612 02ac 0C       		.uleb128 0xc
 1613 02ad 9E000000 		.4byte	.LASF38
 1614 02b1 01       		.byte	0x1
 1615 02b2 9502     		.2byte	0x295
 1616 02b4 83000000 		.4byte	0x83
 1617 02b8 02       		.uleb128 0x2
 1618 02b9 91       		.byte	0x91
 1619 02ba 74       		.sleb128 -12
 1620 02bb 00       		.byte	0
 1621 02bc 10       		.uleb128 0x10
 1622 02bd 2D000000 		.4byte	.LASF45
 1623 02c1 01       		.byte	0x1
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 45


 1624 02c2 B102     		.2byte	0x2b1
 1625 02c4 00000000 		.4byte	.LFB15
 1626 02c8 34000000 		.4byte	.LFE15-.LFB15
 1627 02cc 01       		.uleb128 0x1
 1628 02cd 9C       		.byte	0x9c
 1629 02ce F1020000 		.4byte	0x2f1
 1630 02d2 0C       		.uleb128 0xc
 1631 02d3 8F020000 		.4byte	.LASF34
 1632 02d7 01       		.byte	0x1
 1633 02d8 B102     		.2byte	0x2b1
 1634 02da 83000000 		.4byte	0x83
 1635 02de 02       		.uleb128 0x2
 1636 02df 91       		.byte	0x91
 1637 02e0 74       		.sleb128 -12
 1638 02e1 0C       		.uleb128 0xc
 1639 02e2 A1020000 		.4byte	.LASF46
 1640 02e6 01       		.byte	0x1
 1641 02e7 B102     		.2byte	0x2b1
 1642 02e9 8F000000 		.4byte	0x8f
 1643 02ed 02       		.uleb128 0x2
 1644 02ee 91       		.byte	0x91
 1645 02ef 72       		.sleb128 -14
 1646 02f0 00       		.byte	0
 1647 02f1 10       		.uleb128 0x10
 1648 02f2 16030000 		.4byte	.LASF47
 1649 02f6 01       		.byte	0x1
 1650 02f7 D302     		.2byte	0x2d3
 1651 02f9 00000000 		.4byte	.LFB16
 1652 02fd 2C000000 		.4byte	.LFE16-.LFB16
 1653 0301 01       		.uleb128 0x1
 1654 0302 9C       		.byte	0x9c
 1655 0303 26030000 		.4byte	0x326
 1656 0307 0C       		.uleb128 0xc
 1657 0308 8F020000 		.4byte	.LASF34
 1658 030c 01       		.byte	0x1
 1659 030d D302     		.2byte	0x2d3
 1660 030f 83000000 		.4byte	0x83
 1661 0313 02       		.uleb128 0x2
 1662 0314 91       		.byte	0x91
 1663 0315 74       		.sleb128 -12
 1664 0316 0C       		.uleb128 0xc
 1665 0317 07000000 		.4byte	.LASF48
 1666 031b 01       		.byte	0x1
 1667 031c D302     		.2byte	0x2d3
 1668 031e 9B000000 		.4byte	0x9b
 1669 0322 02       		.uleb128 0x2
 1670 0323 91       		.byte	0x91
 1671 0324 70       		.sleb128 -16
 1672 0325 00       		.byte	0
 1673 0326 0E       		.uleb128 0xe
 1674 0327 66020000 		.4byte	.LASF49
 1675 032b 01       		.byte	0x1
 1676 032c F402     		.2byte	0x2f4
 1677 032e 8F000000 		.4byte	0x8f
 1678 0332 00000000 		.4byte	.LFB17
 1679 0336 A0000000 		.4byte	.LFE17-.LFB17
 1680 033a 01       		.uleb128 0x1
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 46


 1681 033b 9C       		.byte	0x9c
 1682 033c 6E030000 		.4byte	0x36e
 1683 0340 0C       		.uleb128 0xc
 1684 0341 8F020000 		.4byte	.LASF34
 1685 0345 01       		.byte	0x1
 1686 0346 F402     		.2byte	0x2f4
 1687 0348 83000000 		.4byte	0x83
 1688 034c 02       		.uleb128 0x2
 1689 034d 91       		.byte	0x91
 1690 034e 6C       		.sleb128 -20
 1691 034f 0C       		.uleb128 0xc
 1692 0350 A8020000 		.4byte	.LASF50
 1693 0354 01       		.byte	0x1
 1694 0355 F402     		.2byte	0x2f4
 1695 0357 8F000000 		.4byte	0x8f
 1696 035b 02       		.uleb128 0x2
 1697 035c 91       		.byte	0x91
 1698 035d 6A       		.sleb128 -22
 1699 035e 0D       		.uleb128 0xd
 1700 035f 91010000 		.4byte	.LASF51
 1701 0363 01       		.byte	0x1
 1702 0364 F602     		.2byte	0x2f6
 1703 0366 8F000000 		.4byte	0x8f
 1704 036a 02       		.uleb128 0x2
 1705 036b 91       		.byte	0x91
 1706 036c 76       		.sleb128 -10
 1707 036d 00       		.byte	0
 1708 036e 0E       		.uleb128 0xe
 1709 036f ED010000 		.4byte	.LASF52
 1710 0373 01       		.byte	0x1
 1711 0374 2A03     		.2byte	0x32a
 1712 0376 9B000000 		.4byte	0x9b
 1713 037a 00000000 		.4byte	.LFB18
 1714 037e 90000000 		.4byte	.LFE18-.LFB18
 1715 0382 01       		.uleb128 0x1
 1716 0383 9C       		.byte	0x9c
 1717 0384 B6030000 		.4byte	0x3b6
 1718 0388 0C       		.uleb128 0xc
 1719 0389 8F020000 		.4byte	.LASF34
 1720 038d 01       		.byte	0x1
 1721 038e 2A03     		.2byte	0x32a
 1722 0390 83000000 		.4byte	0x83
 1723 0394 02       		.uleb128 0x2
 1724 0395 91       		.byte	0x91
 1725 0396 64       		.sleb128 -28
 1726 0397 0C       		.uleb128 0xc
 1727 0398 A8020000 		.4byte	.LASF50
 1728 039c 01       		.byte	0x1
 1729 039d 2A03     		.2byte	0x32a
 1730 039f 8F000000 		.4byte	0x8f
 1731 03a3 02       		.uleb128 0x2
 1732 03a4 91       		.byte	0x91
 1733 03a5 62       		.sleb128 -30
 1734 03a6 0D       		.uleb128 0xd
 1735 03a7 B8000000 		.4byte	.LASF53
 1736 03ab 01       		.byte	0x1
 1737 03ac 2C03     		.2byte	0x32c
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 47


 1738 03ae C1000000 		.4byte	0xc1
 1739 03b2 02       		.uleb128 0x2
 1740 03b3 91       		.byte	0x91
 1741 03b4 68       		.sleb128 -24
 1742 03b5 00       		.byte	0
 1743 03b6 0E       		.uleb128 0xe
 1744 03b7 06020000 		.4byte	.LASF54
 1745 03bb 01       		.byte	0x1
 1746 03bc 5703     		.2byte	0x357
 1747 03be A7000000 		.4byte	0xa7
 1748 03c2 00000000 		.4byte	.LFB19
 1749 03c6 80000000 		.4byte	.LFE19-.LFB19
 1750 03ca 01       		.uleb128 0x1
 1751 03cb 9C       		.byte	0x9c
 1752 03cc FE030000 		.4byte	0x3fe
 1753 03d0 0C       		.uleb128 0xc
 1754 03d1 8F020000 		.4byte	.LASF34
 1755 03d5 01       		.byte	0x1
 1756 03d6 5703     		.2byte	0x357
 1757 03d8 83000000 		.4byte	0x83
 1758 03dc 02       		.uleb128 0x2
 1759 03dd 91       		.byte	0x91
 1760 03de 64       		.sleb128 -28
 1761 03df 0C       		.uleb128 0xc
 1762 03e0 A8020000 		.4byte	.LASF50
 1763 03e4 01       		.byte	0x1
 1764 03e5 5703     		.2byte	0x357
 1765 03e7 8F000000 		.4byte	0x8f
 1766 03eb 02       		.uleb128 0x2
 1767 03ec 91       		.byte	0x91
 1768 03ed 62       		.sleb128 -30
 1769 03ee 0D       		.uleb128 0xd
 1770 03ef D1000000 		.4byte	.LASF55
 1771 03f3 01       		.byte	0x1
 1772 03f4 5903     		.2byte	0x359
 1773 03f6 A7000000 		.4byte	0xa7
 1774 03fa 02       		.uleb128 0x2
 1775 03fb 91       		.byte	0x91
 1776 03fc 6C       		.sleb128 -20
 1777 03fd 00       		.byte	0
 1778 03fe 11       		.uleb128 0x11
 1779 03ff 0E040000 		.4byte	0x40e
 1780 0403 0E040000 		.4byte	0x40e
 1781 0407 12       		.uleb128 0x12
 1782 0408 EC000000 		.4byte	0xec
 1783 040c 00       		.byte	0
 1784 040d 00       		.byte	0
 1785 040e 13       		.uleb128 0x13
 1786 040f 83000000 		.4byte	0x83
 1787 0413 08       		.uleb128 0x8
 1788 0414 22020000 		.4byte	.LASF56
 1789 0418 01       		.byte	0x1
 1790 0419 21       		.byte	0x21
 1791 041a 24040000 		.4byte	0x424
 1792 041e 05       		.uleb128 0x5
 1793 041f 03       		.byte	0x3
 1794 0420 00000000 		.4byte	PM_channelsConfig
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 48


 1795 0424 13       		.uleb128 0x13
 1796 0425 FE030000 		.4byte	0x3fe
 1797 0429 14       		.uleb128 0x14
 1798 042a E2010000 		.4byte	.LASF57
 1799 042e 01       		.byte	0x1
 1800 042f 18       		.byte	0x18
 1801 0430 6B000000 		.4byte	0x6b
 1802 0434 05       		.uleb128 0x5
 1803 0435 03       		.byte	0x3
 1804 0436 00000000 		.4byte	PM_initVar
 1805 043a 11       		.uleb128 0x11
 1806 043b 4A040000 		.4byte	0x44a
 1807 043f 4A040000 		.4byte	0x44a
 1808 0443 12       		.uleb128 0x12
 1809 0444 EC000000 		.4byte	0xec
 1810 0448 00       		.byte	0
 1811 0449 00       		.byte	0
 1812 044a 05       		.uleb128 0x5
 1813 044b 8F000000 		.4byte	0x8f
 1814 044f 14       		.uleb128 0x14
 1815 0450 5C020000 		.4byte	.LASF58
 1816 0454 01       		.byte	0x1
 1817 0455 19       		.byte	0x19
 1818 0456 60040000 		.4byte	0x460
 1819 045a 05       		.uleb128 0x5
 1820 045b 03       		.byte	0x3
 1821 045c 00000000 		.4byte	PM_offset
 1822 0460 05       		.uleb128 0x5
 1823 0461 3A040000 		.4byte	0x43a
 1824 0465 11       		.uleb128 0x11
 1825 0466 75040000 		.4byte	0x475
 1826 046a 75040000 		.4byte	0x475
 1827 046e 12       		.uleb128 0x12
 1828 046f EC000000 		.4byte	0xec
 1829 0473 00       		.byte	0
 1830 0474 00       		.byte	0
 1831 0475 05       		.uleb128 0x5
 1832 0476 9B000000 		.4byte	0x9b
 1833 047a 14       		.uleb128 0x14
 1834 047b 5D030000 		.4byte	.LASF59
 1835 047f 01       		.byte	0x1
 1836 0480 1A       		.byte	0x1a
 1837 0481 8B040000 		.4byte	0x48b
 1838 0485 05       		.uleb128 0x5
 1839 0486 03       		.byte	0x3
 1840 0487 00000000 		.4byte	PM_countsPer10Volt
 1841 048b 05       		.uleb128 0x5
 1842 048c 65040000 		.4byte	0x465
 1843 0490 00       		.byte	0
 1844              		.section	.debug_abbrev,"",%progbits
 1845              	.Ldebug_abbrev0:
 1846 0000 01       		.uleb128 0x1
 1847 0001 11       		.uleb128 0x11
 1848 0002 01       		.byte	0x1
 1849 0003 25       		.uleb128 0x25
 1850 0004 0E       		.uleb128 0xe
 1851 0005 13       		.uleb128 0x13
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 49


 1852 0006 0B       		.uleb128 0xb
 1853 0007 03       		.uleb128 0x3
 1854 0008 0E       		.uleb128 0xe
 1855 0009 1B       		.uleb128 0x1b
 1856 000a 0E       		.uleb128 0xe
 1857 000b 55       		.uleb128 0x55
 1858 000c 17       		.uleb128 0x17
 1859 000d 11       		.uleb128 0x11
 1860 000e 01       		.uleb128 0x1
 1861 000f 10       		.uleb128 0x10
 1862 0010 17       		.uleb128 0x17
 1863 0011 00       		.byte	0
 1864 0012 00       		.byte	0
 1865 0013 02       		.uleb128 0x2
 1866 0014 24       		.uleb128 0x24
 1867 0015 00       		.byte	0
 1868 0016 0B       		.uleb128 0xb
 1869 0017 0B       		.uleb128 0xb
 1870 0018 3E       		.uleb128 0x3e
 1871 0019 0B       		.uleb128 0xb
 1872 001a 03       		.uleb128 0x3
 1873 001b 0E       		.uleb128 0xe
 1874 001c 00       		.byte	0
 1875 001d 00       		.byte	0
 1876 001e 03       		.uleb128 0x3
 1877 001f 24       		.uleb128 0x24
 1878 0020 00       		.byte	0
 1879 0021 0B       		.uleb128 0xb
 1880 0022 0B       		.uleb128 0xb
 1881 0023 3E       		.uleb128 0x3e
 1882 0024 0B       		.uleb128 0xb
 1883 0025 03       		.uleb128 0x3
 1884 0026 08       		.uleb128 0x8
 1885 0027 00       		.byte	0
 1886 0028 00       		.byte	0
 1887 0029 04       		.uleb128 0x4
 1888 002a 16       		.uleb128 0x16
 1889 002b 00       		.byte	0
 1890 002c 03       		.uleb128 0x3
 1891 002d 0E       		.uleb128 0xe
 1892 002e 3A       		.uleb128 0x3a
 1893 002f 0B       		.uleb128 0xb
 1894 0030 3B       		.uleb128 0x3b
 1895 0031 05       		.uleb128 0x5
 1896 0032 49       		.uleb128 0x49
 1897 0033 13       		.uleb128 0x13
 1898 0034 00       		.byte	0
 1899 0035 00       		.byte	0
 1900 0036 05       		.uleb128 0x5
 1901 0037 35       		.uleb128 0x35
 1902 0038 00       		.byte	0
 1903 0039 49       		.uleb128 0x49
 1904 003a 13       		.uleb128 0x13
 1905 003b 00       		.byte	0
 1906 003c 00       		.byte	0
 1907 003d 06       		.uleb128 0x6
 1908 003e 2E       		.uleb128 0x2e
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 50


 1909 003f 00       		.byte	0
 1910 0040 3F       		.uleb128 0x3f
 1911 0041 19       		.uleb128 0x19
 1912 0042 03       		.uleb128 0x3
 1913 0043 0E       		.uleb128 0xe
 1914 0044 3A       		.uleb128 0x3a
 1915 0045 0B       		.uleb128 0xb
 1916 0046 3B       		.uleb128 0x3b
 1917 0047 0B       		.uleb128 0xb
 1918 0048 27       		.uleb128 0x27
 1919 0049 19       		.uleb128 0x19
 1920 004a 11       		.uleb128 0x11
 1921 004b 01       		.uleb128 0x1
 1922 004c 12       		.uleb128 0x12
 1923 004d 06       		.uleb128 0x6
 1924 004e 40       		.uleb128 0x40
 1925 004f 18       		.uleb128 0x18
 1926 0050 9642     		.uleb128 0x2116
 1927 0052 19       		.uleb128 0x19
 1928 0053 00       		.byte	0
 1929 0054 00       		.byte	0
 1930 0055 07       		.uleb128 0x7
 1931 0056 2E       		.uleb128 0x2e
 1932 0057 01       		.byte	0x1
 1933 0058 3F       		.uleb128 0x3f
 1934 0059 19       		.uleb128 0x19
 1935 005a 03       		.uleb128 0x3
 1936 005b 0E       		.uleb128 0xe
 1937 005c 3A       		.uleb128 0x3a
 1938 005d 0B       		.uleb128 0xb
 1939 005e 3B       		.uleb128 0x3b
 1940 005f 0B       		.uleb128 0xb
 1941 0060 27       		.uleb128 0x27
 1942 0061 19       		.uleb128 0x19
 1943 0062 11       		.uleb128 0x11
 1944 0063 01       		.uleb128 0x1
 1945 0064 12       		.uleb128 0x12
 1946 0065 06       		.uleb128 0x6
 1947 0066 40       		.uleb128 0x40
 1948 0067 18       		.uleb128 0x18
 1949 0068 9642     		.uleb128 0x2116
 1950 006a 19       		.uleb128 0x19
 1951 006b 01       		.uleb128 0x1
 1952 006c 13       		.uleb128 0x13
 1953 006d 00       		.byte	0
 1954 006e 00       		.byte	0
 1955 006f 08       		.uleb128 0x8
 1956 0070 34       		.uleb128 0x34
 1957 0071 00       		.byte	0
 1958 0072 03       		.uleb128 0x3
 1959 0073 0E       		.uleb128 0xe
 1960 0074 3A       		.uleb128 0x3a
 1961 0075 0B       		.uleb128 0xb
 1962 0076 3B       		.uleb128 0x3b
 1963 0077 0B       		.uleb128 0xb
 1964 0078 49       		.uleb128 0x49
 1965 0079 13       		.uleb128 0x13
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 51


 1966 007a 02       		.uleb128 0x2
 1967 007b 18       		.uleb128 0x18
 1968 007c 00       		.byte	0
 1969 007d 00       		.byte	0
 1970 007e 09       		.uleb128 0x9
 1971 007f 2E       		.uleb128 0x2e
 1972 0080 00       		.byte	0
 1973 0081 3F       		.uleb128 0x3f
 1974 0082 19       		.uleb128 0x19
 1975 0083 03       		.uleb128 0x3
 1976 0084 0E       		.uleb128 0xe
 1977 0085 3A       		.uleb128 0x3a
 1978 0086 0B       		.uleb128 0xb
 1979 0087 3B       		.uleb128 0x3b
 1980 0088 05       		.uleb128 0x5
 1981 0089 27       		.uleb128 0x27
 1982 008a 19       		.uleb128 0x19
 1983 008b 11       		.uleb128 0x11
 1984 008c 01       		.uleb128 0x1
 1985 008d 12       		.uleb128 0x12
 1986 008e 06       		.uleb128 0x6
 1987 008f 40       		.uleb128 0x40
 1988 0090 18       		.uleb128 0x18
 1989 0091 9642     		.uleb128 0x2116
 1990 0093 19       		.uleb128 0x19
 1991 0094 00       		.byte	0
 1992 0095 00       		.byte	0
 1993 0096 0A       		.uleb128 0xa
 1994 0097 2E       		.uleb128 0x2e
 1995 0098 00       		.byte	0
 1996 0099 3F       		.uleb128 0x3f
 1997 009a 19       		.uleb128 0x19
 1998 009b 03       		.uleb128 0x3
 1999 009c 0E       		.uleb128 0xe
 2000 009d 3A       		.uleb128 0x3a
 2001 009e 0B       		.uleb128 0xb
 2002 009f 3B       		.uleb128 0x3b
 2003 00a0 05       		.uleb128 0x5
 2004 00a1 27       		.uleb128 0x27
 2005 00a2 19       		.uleb128 0x19
 2006 00a3 11       		.uleb128 0x11
 2007 00a4 01       		.uleb128 0x1
 2008 00a5 12       		.uleb128 0x12
 2009 00a6 06       		.uleb128 0x6
 2010 00a7 40       		.uleb128 0x40
 2011 00a8 18       		.uleb128 0x18
 2012 00a9 9742     		.uleb128 0x2117
 2013 00ab 19       		.uleb128 0x19
 2014 00ac 00       		.byte	0
 2015 00ad 00       		.byte	0
 2016 00ae 0B       		.uleb128 0xb
 2017 00af 2E       		.uleb128 0x2e
 2018 00b0 01       		.byte	0x1
 2019 00b1 3F       		.uleb128 0x3f
 2020 00b2 19       		.uleb128 0x19
 2021 00b3 03       		.uleb128 0x3
 2022 00b4 0E       		.uleb128 0xe
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 52


 2023 00b5 3A       		.uleb128 0x3a
 2024 00b6 0B       		.uleb128 0xb
 2025 00b7 3B       		.uleb128 0x3b
 2026 00b8 05       		.uleb128 0x5
 2027 00b9 27       		.uleb128 0x27
 2028 00ba 19       		.uleb128 0x19
 2029 00bb 49       		.uleb128 0x49
 2030 00bc 13       		.uleb128 0x13
 2031 00bd 11       		.uleb128 0x11
 2032 00be 01       		.uleb128 0x1
 2033 00bf 12       		.uleb128 0x12
 2034 00c0 06       		.uleb128 0x6
 2035 00c1 40       		.uleb128 0x40
 2036 00c2 18       		.uleb128 0x18
 2037 00c3 9742     		.uleb128 0x2117
 2038 00c5 19       		.uleb128 0x19
 2039 00c6 01       		.uleb128 0x1
 2040 00c7 13       		.uleb128 0x13
 2041 00c8 00       		.byte	0
 2042 00c9 00       		.byte	0
 2043 00ca 0C       		.uleb128 0xc
 2044 00cb 05       		.uleb128 0x5
 2045 00cc 00       		.byte	0
 2046 00cd 03       		.uleb128 0x3
 2047 00ce 0E       		.uleb128 0xe
 2048 00cf 3A       		.uleb128 0x3a
 2049 00d0 0B       		.uleb128 0xb
 2050 00d1 3B       		.uleb128 0x3b
 2051 00d2 05       		.uleb128 0x5
 2052 00d3 49       		.uleb128 0x49
 2053 00d4 13       		.uleb128 0x13
 2054 00d5 02       		.uleb128 0x2
 2055 00d6 18       		.uleb128 0x18
 2056 00d7 00       		.byte	0
 2057 00d8 00       		.byte	0
 2058 00d9 0D       		.uleb128 0xd
 2059 00da 34       		.uleb128 0x34
 2060 00db 00       		.byte	0
 2061 00dc 03       		.uleb128 0x3
 2062 00dd 0E       		.uleb128 0xe
 2063 00de 3A       		.uleb128 0x3a
 2064 00df 0B       		.uleb128 0xb
 2065 00e0 3B       		.uleb128 0x3b
 2066 00e1 05       		.uleb128 0x5
 2067 00e2 49       		.uleb128 0x49
 2068 00e3 13       		.uleb128 0x13
 2069 00e4 02       		.uleb128 0x2
 2070 00e5 18       		.uleb128 0x18
 2071 00e6 00       		.byte	0
 2072 00e7 00       		.byte	0
 2073 00e8 0E       		.uleb128 0xe
 2074 00e9 2E       		.uleb128 0x2e
 2075 00ea 01       		.byte	0x1
 2076 00eb 3F       		.uleb128 0x3f
 2077 00ec 19       		.uleb128 0x19
 2078 00ed 03       		.uleb128 0x3
 2079 00ee 0E       		.uleb128 0xe
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 53


 2080 00ef 3A       		.uleb128 0x3a
 2081 00f0 0B       		.uleb128 0xb
 2082 00f1 3B       		.uleb128 0x3b
 2083 00f2 05       		.uleb128 0x5
 2084 00f3 27       		.uleb128 0x27
 2085 00f4 19       		.uleb128 0x19
 2086 00f5 49       		.uleb128 0x49
 2087 00f6 13       		.uleb128 0x13
 2088 00f7 11       		.uleb128 0x11
 2089 00f8 01       		.uleb128 0x1
 2090 00f9 12       		.uleb128 0x12
 2091 00fa 06       		.uleb128 0x6
 2092 00fb 40       		.uleb128 0x40
 2093 00fc 18       		.uleb128 0x18
 2094 00fd 9642     		.uleb128 0x2116
 2095 00ff 19       		.uleb128 0x19
 2096 0100 01       		.uleb128 0x1
 2097 0101 13       		.uleb128 0x13
 2098 0102 00       		.byte	0
 2099 0103 00       		.byte	0
 2100 0104 0F       		.uleb128 0xf
 2101 0105 2E       		.uleb128 0x2e
 2102 0106 01       		.byte	0x1
 2103 0107 3F       		.uleb128 0x3f
 2104 0108 19       		.uleb128 0x19
 2105 0109 03       		.uleb128 0x3
 2106 010a 0E       		.uleb128 0xe
 2107 010b 3A       		.uleb128 0x3a
 2108 010c 0B       		.uleb128 0xb
 2109 010d 3B       		.uleb128 0x3b
 2110 010e 05       		.uleb128 0x5
 2111 010f 27       		.uleb128 0x27
 2112 0110 19       		.uleb128 0x19
 2113 0111 11       		.uleb128 0x11
 2114 0112 01       		.uleb128 0x1
 2115 0113 12       		.uleb128 0x12
 2116 0114 06       		.uleb128 0x6
 2117 0115 40       		.uleb128 0x40
 2118 0116 18       		.uleb128 0x18
 2119 0117 9742     		.uleb128 0x2117
 2120 0119 19       		.uleb128 0x19
 2121 011a 01       		.uleb128 0x1
 2122 011b 13       		.uleb128 0x13
 2123 011c 00       		.byte	0
 2124 011d 00       		.byte	0
 2125 011e 10       		.uleb128 0x10
 2126 011f 2E       		.uleb128 0x2e
 2127 0120 01       		.byte	0x1
 2128 0121 3F       		.uleb128 0x3f
 2129 0122 19       		.uleb128 0x19
 2130 0123 03       		.uleb128 0x3
 2131 0124 0E       		.uleb128 0xe
 2132 0125 3A       		.uleb128 0x3a
 2133 0126 0B       		.uleb128 0xb
 2134 0127 3B       		.uleb128 0x3b
 2135 0128 05       		.uleb128 0x5
 2136 0129 27       		.uleb128 0x27
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 54


 2137 012a 19       		.uleb128 0x19
 2138 012b 11       		.uleb128 0x11
 2139 012c 01       		.uleb128 0x1
 2140 012d 12       		.uleb128 0x12
 2141 012e 06       		.uleb128 0x6
 2142 012f 40       		.uleb128 0x40
 2143 0130 18       		.uleb128 0x18
 2144 0131 9642     		.uleb128 0x2116
 2145 0133 19       		.uleb128 0x19
 2146 0134 01       		.uleb128 0x1
 2147 0135 13       		.uleb128 0x13
 2148 0136 00       		.byte	0
 2149 0137 00       		.byte	0
 2150 0138 11       		.uleb128 0x11
 2151 0139 01       		.uleb128 0x1
 2152 013a 01       		.byte	0x1
 2153 013b 49       		.uleb128 0x49
 2154 013c 13       		.uleb128 0x13
 2155 013d 01       		.uleb128 0x1
 2156 013e 13       		.uleb128 0x13
 2157 013f 00       		.byte	0
 2158 0140 00       		.byte	0
 2159 0141 12       		.uleb128 0x12
 2160 0142 21       		.uleb128 0x21
 2161 0143 00       		.byte	0
 2162 0144 49       		.uleb128 0x49
 2163 0145 13       		.uleb128 0x13
 2164 0146 2F       		.uleb128 0x2f
 2165 0147 0B       		.uleb128 0xb
 2166 0148 00       		.byte	0
 2167 0149 00       		.byte	0
 2168 014a 13       		.uleb128 0x13
 2169 014b 26       		.uleb128 0x26
 2170 014c 00       		.byte	0
 2171 014d 49       		.uleb128 0x49
 2172 014e 13       		.uleb128 0x13
 2173 014f 00       		.byte	0
 2174 0150 00       		.byte	0
 2175 0151 14       		.uleb128 0x14
 2176 0152 34       		.uleb128 0x34
 2177 0153 00       		.byte	0
 2178 0154 03       		.uleb128 0x3
 2179 0155 0E       		.uleb128 0xe
 2180 0156 3A       		.uleb128 0x3a
 2181 0157 0B       		.uleb128 0xb
 2182 0158 3B       		.uleb128 0x3b
 2183 0159 0B       		.uleb128 0xb
 2184 015a 49       		.uleb128 0x49
 2185 015b 13       		.uleb128 0x13
 2186 015c 3F       		.uleb128 0x3f
 2187 015d 19       		.uleb128 0x19
 2188 015e 02       		.uleb128 0x2
 2189 015f 18       		.uleb128 0x18
 2190 0160 00       		.byte	0
 2191 0161 00       		.byte	0
 2192 0162 00       		.byte	0
 2193              		.section	.debug_aranges,"",%progbits
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 55


 2194 0000 A4000000 		.4byte	0xa4
 2195 0004 0200     		.2byte	0x2
 2196 0006 00000000 		.4byte	.Ldebug_info0
 2197 000a 04       		.byte	0x4
 2198 000b 00       		.byte	0
 2199 000c 0000     		.2byte	0
 2200 000e 0000     		.2byte	0
 2201 0010 00000000 		.4byte	.LFB2
 2202 0014 24000000 		.4byte	.LFE2-.LFB2
 2203 0018 00000000 		.4byte	.LFB3
 2204 001c CC010000 		.4byte	.LFE3-.LFB3
 2205 0020 00000000 		.4byte	.LFB4
 2206 0024 38000000 		.4byte	.LFE4-.LFB4
 2207 0028 00000000 		.4byte	.LFB5
 2208 002c 1C000000 		.4byte	.LFE5-.LFB5
 2209 0030 00000000 		.4byte	.LFB6
 2210 0034 1C000000 		.4byte	.LFE6-.LFB6
 2211 0038 00000000 		.4byte	.LFB7
 2212 003c 20000000 		.4byte	.LFE7-.LFB7
 2213 0040 00000000 		.4byte	.LFB8
 2214 0044 48000000 		.4byte	.LFE8-.LFB8
 2215 0048 00000000 		.4byte	.LFB9
 2216 004c 44000000 		.4byte	.LFE9-.LFB9
 2217 0050 00000000 		.4byte	.LFB10
 2218 0054 20000000 		.4byte	.LFE10-.LFB10
 2219 0058 00000000 		.4byte	.LFB11
 2220 005c 30000000 		.4byte	.LFE11-.LFB11
 2221 0060 00000000 		.4byte	.LFB12
 2222 0064 30000000 		.4byte	.LFE12-.LFB12
 2223 0068 00000000 		.4byte	.LFB13
 2224 006c 20000000 		.4byte	.LFE13-.LFB13
 2225 0070 00000000 		.4byte	.LFB14
 2226 0074 20000000 		.4byte	.LFE14-.LFB14
 2227 0078 00000000 		.4byte	.LFB15
 2228 007c 34000000 		.4byte	.LFE15-.LFB15
 2229 0080 00000000 		.4byte	.LFB16
 2230 0084 2C000000 		.4byte	.LFE16-.LFB16
 2231 0088 00000000 		.4byte	.LFB17
 2232 008c A0000000 		.4byte	.LFE17-.LFB17
 2233 0090 00000000 		.4byte	.LFB18
 2234 0094 90000000 		.4byte	.LFE18-.LFB18
 2235 0098 00000000 		.4byte	.LFB19
 2236 009c 80000000 		.4byte	.LFE19-.LFB19
 2237 00a0 00000000 		.4byte	0
 2238 00a4 00000000 		.4byte	0
 2239              		.section	.debug_ranges,"",%progbits
 2240              	.Ldebug_ranges0:
 2241 0000 00000000 		.4byte	.LFB2
 2242 0004 24000000 		.4byte	.LFE2
 2243 0008 00000000 		.4byte	.LFB3
 2244 000c CC010000 		.4byte	.LFE3
 2245 0010 00000000 		.4byte	.LFB4
 2246 0014 38000000 		.4byte	.LFE4
 2247 0018 00000000 		.4byte	.LFB5
 2248 001c 1C000000 		.4byte	.LFE5
 2249 0020 00000000 		.4byte	.LFB6
 2250 0024 1C000000 		.4byte	.LFE6
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 56


 2251 0028 00000000 		.4byte	.LFB7
 2252 002c 20000000 		.4byte	.LFE7
 2253 0030 00000000 		.4byte	.LFB8
 2254 0034 48000000 		.4byte	.LFE8
 2255 0038 00000000 		.4byte	.LFB9
 2256 003c 44000000 		.4byte	.LFE9
 2257 0040 00000000 		.4byte	.LFB10
 2258 0044 20000000 		.4byte	.LFE10
 2259 0048 00000000 		.4byte	.LFB11
 2260 004c 30000000 		.4byte	.LFE11
 2261 0050 00000000 		.4byte	.LFB12
 2262 0054 30000000 		.4byte	.LFE12
 2263 0058 00000000 		.4byte	.LFB13
 2264 005c 20000000 		.4byte	.LFE13
 2265 0060 00000000 		.4byte	.LFB14
 2266 0064 20000000 		.4byte	.LFE14
 2267 0068 00000000 		.4byte	.LFB15
 2268 006c 34000000 		.4byte	.LFE15
 2269 0070 00000000 		.4byte	.LFB16
 2270 0074 2C000000 		.4byte	.LFE16
 2271 0078 00000000 		.4byte	.LFB17
 2272 007c A0000000 		.4byte	.LFE17
 2273 0080 00000000 		.4byte	.LFB18
 2274 0084 90000000 		.4byte	.LFE18
 2275 0088 00000000 		.4byte	.LFB19
 2276 008c 80000000 		.4byte	.LFE19
 2277 0090 00000000 		.4byte	0
 2278 0094 00000000 		.4byte	0
 2279              		.section	.debug_line,"",%progbits
 2280              	.Ldebug_line0:
 2281 0000 97020000 		.section	.debug_str,"MS",%progbits,1
 2281      02003F00 
 2281      00000201 
 2281      FB0E0D00 
 2281      01010101 
 2282              	.LASF10:
 2283 0000 75696E74 		.ascii	"uint16\000"
 2283      313600
 2284              	.LASF48:
 2285 0007 61646347 		.ascii	"adcGain\000"
 2285      61696E00 
 2286              	.LASF24:
 2287 000f 636F756E 		.ascii	"counts\000"
 2287      747300
 2288              	.LASF7:
 2289 0016 6C6F6E67 		.ascii	"long long unsigned int\000"
 2289      206C6F6E 
 2289      6720756E 
 2289      7369676E 
 2289      65642069 
 2290              	.LASF45:
 2291 002d 504D5F53 		.ascii	"PM_SetOffset\000"
 2291      65744F66 
 2291      66736574 
 2291      00
 2292              	.LASF6:
 2293 003a 6C6F6E67 		.ascii	"long long int\000"
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 57


 2293      206C6F6E 
 2293      6720696E 
 2293      7400
 2294              	.LASF0:
 2295 0048 7369676E 		.ascii	"signed char\000"
 2295      65642063 
 2295      68617200 
 2296              	.LASF44:
 2297 0054 504D5F53 		.ascii	"PM_SetSatMask\000"
 2297      65745361 
 2297      744D6173 
 2297      6B00
 2298              	.LASF13:
 2299 0062 696E7433 		.ascii	"int32\000"
 2299      3200
 2300              	.LASF26:
 2301 0068 504D5F45 		.ascii	"PM_Enable\000"
 2301      6E61626C 
 2301      6500
 2302              	.LASF4:
 2303 0072 6C6F6E67 		.ascii	"long int\000"
 2303      20696E74 
 2303      00
 2304              	.LASF9:
 2305 007b 75696E74 		.ascii	"uint8\000"
 2305      3800
 2306              	.LASF16:
 2307 0081 646F7562 		.ascii	"double\000"
 2307      6C6500
 2308              	.LASF29:
 2309 0088 504D5F53 		.ascii	"PM_StopConvert\000"
 2309      746F7043 
 2309      6F6E7665 
 2309      727400
 2310              	.LASF11:
 2311 0097 75696E74 		.ascii	"uint32\000"
 2311      333200
 2312              	.LASF38:
 2313 009e 6D61736B 		.ascii	"mask\000"
 2313      00
 2314              	.LASF33:
 2315 00a3 7265744D 		.ascii	"retMode\000"
 2315      6F646500 
 2316              	.LASF8:
 2317 00ab 756E7369 		.ascii	"unsigned int\000"
 2317      676E6564 
 2317      20696E74 
 2317      00
 2318              	.LASF53:
 2319 00b8 75566F6C 		.ascii	"uVolts\000"
 2319      747300
 2320              	.LASF5:
 2321 00bf 6C6F6E67 		.ascii	"long unsigned int\000"
 2321      20756E73 
 2321      69676E65 
 2321      6420696E 
 2321      7400
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 58


 2322              	.LASF55:
 2323 00d1 766F6C74 		.ascii	"volts\000"
 2323      7300
 2324              	.LASF23:
 2325 00d7 746D7052 		.ascii	"tmpRegVal\000"
 2325      65675661 
 2325      6C00
 2326              	.LASF3:
 2327 00e1 73686F72 		.ascii	"short unsigned int\000"
 2327      7420756E 
 2327      7369676E 
 2327      65642069 
 2327      6E7400
 2328              	.LASF37:
 2329 00f4 504D5F53 		.ascii	"PM_SetChanMask\000"
 2329      65744368 
 2329      616E4D61 
 2329      736B00
 2330              	.LASF60:
 2331 0103 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2331      43313120 
 2331      352E342E 
 2331      31203230 
 2331      31363036 
 2332 0136 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 2332      20726576 
 2332      6973696F 
 2332      6E203233 
 2332      37373135 
 2333 0169 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2333      66756E63 
 2333      74696F6E 
 2333      2D736563 
 2333      74696F6E 
 2334              	.LASF51:
 2335 0191 6D566F6C 		.ascii	"mVolts\000"
 2335      747300
 2336              	.LASF25:
 2337 0198 504D5F53 		.ascii	"PM_Start\000"
 2337      74617274 
 2337      00
 2338              	.LASF19:
 2339 01a1 72656733 		.ascii	"reg32\000"
 2339      3200
 2340              	.LASF39:
 2341 01a7 504D5F53 		.ascii	"PM_SetLowLimit\000"
 2341      65744C6F 
 2341      774C696D 
 2341      697400
 2342              	.LASF14:
 2343 01b6 666C6F61 		.ascii	"float32\000"
 2343      74333200 
 2344              	.LASF21:
 2345 01be 73697A65 		.ascii	"sizetype\000"
 2345      74797065 
 2345      00
 2346              	.LASF40:
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 59


 2347 01c7 6C6F774C 		.ascii	"lowLimit\000"
 2347      696D6974 
 2347      00
 2348              	.LASF20:
 2349 01d0 6C6F6E67 		.ascii	"long double\000"
 2349      20646F75 
 2349      626C6500 
 2350              	.LASF17:
 2351 01dc 696E7436 		.ascii	"int64\000"
 2351      3400
 2352              	.LASF57:
 2353 01e2 504D5F69 		.ascii	"PM_initVar\000"
 2353      6E697456 
 2353      617200
 2354              	.LASF52:
 2355 01ed 504D5F43 		.ascii	"PM_CountsTo_uVolts\000"
 2355      6F756E74 
 2355      73546F5F 
 2355      75566F6C 
 2355      747300
 2356              	.LASF15:
 2357 0200 666C6F61 		.ascii	"float\000"
 2357      7400
 2358              	.LASF54:
 2359 0206 504D5F43 		.ascii	"PM_CountsTo_Volts\000"
 2359      6F756E74 
 2359      73546F5F 
 2359      566F6C74 
 2359      7300
 2360              	.LASF42:
 2361 0218 68696768 		.ascii	"highLimit\000"
 2361      4C696D69 
 2361      7400
 2362              	.LASF56:
 2363 0222 504D5F63 		.ascii	"PM_channelsConfig\000"
 2363      68616E6E 
 2363      656C7343 
 2363      6F6E6669 
 2363      6700
 2364              	.LASF1:
 2365 0234 756E7369 		.ascii	"unsigned char\000"
 2365      676E6564 
 2365      20636861 
 2365      7200
 2366              	.LASF43:
 2367 0242 504D5F53 		.ascii	"PM_SetLimitMask\000"
 2367      65744C69 
 2367      6D69744D 
 2367      61736B00 
 2368              	.LASF2:
 2369 0252 73686F72 		.ascii	"short int\000"
 2369      7420696E 
 2369      7400
 2370              	.LASF58:
 2371 025c 504D5F6F 		.ascii	"PM_offset\000"
 2371      66667365 
 2371      7400
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 60


 2372              	.LASF49:
 2373 0266 504D5F43 		.ascii	"PM_CountsTo_mVolts\000"
 2373      6F756E74 
 2373      73546F5F 
 2373      6D566F6C 
 2373      747300
 2374              	.LASF22:
 2375 0279 63684E75 		.ascii	"chNum\000"
 2375      6D00
 2376              	.LASF28:
 2377 027f 504D5F53 		.ascii	"PM_StartConvert\000"
 2377      74617274 
 2377      436F6E76 
 2377      65727400 
 2378              	.LASF34:
 2379 028f 6368616E 		.ascii	"chan\000"
 2379      00
 2380              	.LASF27:
 2381 0294 504D5F53 		.ascii	"PM_Stop\000"
 2381      746F7000 
 2382              	.LASF18:
 2383 029c 63686172 		.ascii	"char\000"
 2383      00
 2384              	.LASF46:
 2385 02a1 6F666673 		.ascii	"offset\000"
 2385      657400
 2386              	.LASF50:
 2387 02a8 61646343 		.ascii	"adcCounts\000"
 2387      6F756E74 
 2387      7300
 2388              	.LASF32:
 2389 02b2 504D5F47 		.ascii	"PM_GetResult16\000"
 2389      65745265 
 2389      73756C74 
 2389      313600
 2390              	.LASF41:
 2391 02c1 504D5F53 		.ascii	"PM_SetHighLimit\000"
 2391      65744869 
 2391      67684C69 
 2391      6D697400 
 2392              	.LASF62:
 2393 02d1 433A5C55 		.ascii	"C:\\Users\\alexport\\OneDrive - Safeguard Analytics"
 2393      73657273 
 2393      5C616C65 
 2393      78706F72 
 2393      745C4F6E 
 2394 0301 5C53412D 		.ascii	"\\SA-220\\SA-220.cydsn\000"
 2394      3232305C 
 2394      53412D32 
 2394      32302E63 
 2394      7964736E 
 2395              	.LASF47:
 2396 0316 504D5F53 		.ascii	"PM_SetGain\000"
 2396      65744761 
 2396      696E00
 2397              	.LASF30:
 2398 0321 73746174 		.ascii	"status\000"
ARM GAS  C:\Users\alexport\AppData\Local\Temp\ccSpEDkx.s 			page 61


 2398      757300
 2399              	.LASF12:
 2400 0328 696E7431 		.ascii	"int16\000"
 2400      3600
 2401              	.LASF31:
 2402 032e 504D5F49 		.ascii	"PM_IsEndConversion\000"
 2402      73456E64 
 2402      436F6E76 
 2402      65727369 
 2402      6F6E00
 2403              	.LASF61:
 2404 0341 47656E65 		.ascii	"Generated_Source\\PSoC4\\PM.c\000"
 2404      72617465 
 2404      645F536F 
 2404      75726365 
 2404      5C50536F 
 2405              	.LASF59:
 2406 035d 504D5F63 		.ascii	"PM_countsPer10Volt\000"
 2406      6F756E74 
 2406      73506572 
 2406      3130566F 
 2406      6C7400
 2407              	.LASF36:
 2408 0370 504D5F49 		.ascii	"PM_Init\000"
 2408      6E697400 
 2409              	.LASF35:
 2410 0378 72657375 		.ascii	"result\000"
 2410      6C7400
 2411              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
